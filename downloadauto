
import os
import time
import traceback
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# ----------------- CONFIGURATION -----------------

# ----------------- SETUP EDGE DRIVER -----------------
options = EdgeOptions()
prefs = {
    "download.default_directory": DOWNLOAD_DIR,
    "download.prompt_for_download": False,
    "plugins.always_open_pdf_externally": True
}
options.add_experimental_option("prefs", prefs)

service = EdgeService(executable_path=EDGE_DRIVER_PATH)
driver = webdriver.Edge(service=service, options=options)
driver.maximize_window()
wait = WebDriverWait(driver, WAIT_TIMEOUT)

driver.get(PORTAL_URL)

# ----------------- READ CASE LIST -----------------
print("Reading Excel file...")
df = pd.read_excel(EXCEL_FILE, dtype={CASE_ID_COLUMN: str})
case_list = df[CASE_ID_COLUMN].astype(str).tolist()
print(f"Loaded {len(case_list)} case IDs.")

# ----------------- AUTOMATION LOOP -----------------
for case_id in case_list:
    print(f"\n--- Processing case: {case_id} ---")
    try:
        # Wait for and enter the case number
        input_box = wait.until(EC.presence_of_element_located((By.XPATH, "//input[@aria-label='Case ID Number']")))
        input_box.clear()
        input_box.send_keys(case_id)
        driver.execute_script("""
            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
            arguments[0].dispatchEvent(new Event('change', { bubbles: true }));
        """, input_box)

        # Click the Search button
        print("Clicking 'Search'...")
        search_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[text()='Search']")))
        search_button.click()

        # Wait for the search result > arrow and click it
        print("Clicking expand arrow...")
        expand_arrow = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(@class, 'ExpCollIcon')]")))
        expand_arrow.click()

        # Click 'View Case'
        print("Clicking 'View Case'...")
        view_case = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'View Case')]")))
        view_case.click()

        # Scroll to Attachments section
        print("Scrolling to 'Attachments' section...")
        attach_section = wait.until(EC.presence_of_element_located((By.XPATH, "//h4[text()='Attachments']")))
        driver.execute_script("arguments[0].scrollIntoView(true);", attach_section)

        # Get all download links
        print("Looking for attachment links...")
        attachment_links = driver.find_elements(By.CSS_SELECTOR, "a[href$='.pdf'], a[href$='.docx'], a[href$='.doc'], a[href$='.xlsx'], a[href$='.xls'], a[href$='.html']")

        if not attachment_links:
            print("No attachments found.")
            continue

        # Create folder per case
        case_folder = os.path.join(DOWNLOAD_DIR, case_id)
        os.makedirs(case_folder, exist_ok=True)

        # Download each file
        for link in attachment_links:
            file_name = link.text.strip() or "downloaded_file"
            print(f"Downloading: {file_name}")
            before_files = set(os.listdir(DOWNLOAD_DIR))

            link.click()
            downloaded = False

            for _ in range(WAIT_TIMEOUT):
                time.sleep(1)
                after_files = set(os.listdir(DOWNLOAD_DIR))
                new_files = after_files - before_files
                if new_files:
                    downloaded_file = new_files.pop()
                    os.rename(
                        os.path.join(DOWNLOAD_DIR, downloaded_file),
                        os.path.join(case_folder, downloaded_file)
                    )
                    print(f"Saved to: {case_folder}/{downloaded_file}")
                    downloaded = True
                    break

            if not downloaded:
                print(f"Timeout: Download did not complete for {file_name}")

        # Go back to search page
        print("Returning to search page...")
        driver.switch_to.default_content()
        driver.back()
        time.sleep(3)

    except Exception as e:
        print(f"Error with case {case_id}: {e}")
        traceback.print_exc()
        driver.switch_to.default_content()
        driver.get(PORTAL_URL)
        time.sleep(5)

driver.quit()
print("All done.")
