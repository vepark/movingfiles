import os
import time
import traceback
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.edge.options import Options as EdgeOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC



# ----------------- SETUP EDGE DRIVER -----------------
options = EdgeOptions()
prefs = {
    "download.default_directory": DOWNLOAD_DIR,
    "download.prompt_for_download": False,
    "plugins.always_open_pdf_externally": True
}
options.add_experimental_option("prefs", prefs)

service = EdgeService(executable_path=EDGE_DRIVER_PATH)
driver = webdriver.Edge(service=service, options=options)
driver.maximize_window()
wait = WebDriverWait(driver, WAIT_TIMEOUT)

print("Opening ECMP portal...")
driver.get(PORTAL_URL)

# ----------------- READ CASE LIST -----------------
print("Reading Excel file...")
df = pd.read_excel(EXCEL_FILE, dtype={CASE_ID_COLUMN: str})
case_list = df[CASE_ID_COLUMN].astype(str).tolist()
print(f"Loaded {len(case_list)} case IDs.")

# ----------------- AUTOMATION LOOP -----------------
for case_id in case_list:
    print(f"\n========== Processing case: {case_id} ==========")
    try:
        print("Clicking 'Case Search'...")
        case_search_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Case Search']")))
        case_search_button.click()

        print("‚è≥ Waiting 10 seconds for form to load...")
        time.sleep(10)

        # Locate input field
        try:
            print("üîç Looking for Case ID input using ID selector...")
            case_input = wait.until(EC.presence_of_element_located((By.XPATH, "//*[@id='774c51e8']")))
        except Exception as e:
            print("‚ùå Could not locate Case ID input. Dumping all inputs:")
            inputs = driver.find_elements(By.TAG_NAME, "input")
            for idx, el in enumerate(inputs):
                print(f"[{idx}] id: {el.get_attribute('id')}, aria-label: {el.get_attribute('aria-label')}, placeholder: {el.get_attribute('placeholder')}")
            raise e

        # ‚úÖ FIX: Click before sending keys to focus input
        driver.execute_script("arguments[0].scrollIntoView(true);", case_input)
        case_input.click()
        time.sleep(0.5)
        case_input.clear()
        case_input.send_keys(case_id)
        driver.execute_script("""
            arguments[0].dispatchEvent(new Event('input', { bubbles: true }));
            arguments[0].dispatchEvent(new Event('change', { bubbles: true }));
        """, case_input)
        print(f"‚úÖ Case ID {case_id} entered.")

        # Click Search
        print("Clicking 'Search' button...")
        search_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[text()='Search']")))
        search_button.click()

        print("Clicking expand arrow...")
        expand_row = wait.until(EC.element_to_be_clickable((By.XPATH, "//span[contains(@class,'pi-chevron-right')]")))
        expand_row.click()

        print("Clicking 'View Case'...")
        view_case_btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[normalize-space()='View Case']")))
        view_case_btn.click()

        # Handle optional popup
        try:
            ok_button = WebDriverWait(driver, 3).until(EC.element_to_be_clickable((By.XPATH, "//button[text()='OK']")))
            ok_button.click()
            print("Popup handled.")
        except:
            print("No popup appeared.")

        # Scroll to Attachments
        print("Scrolling to 'Attachments' section...")
        attachments_header = wait.until(EC.presence_of_element_located((By.XPATH, "//h4[contains(text(), 'Attachments')]")))
        driver.execute_script("arguments[0].scrollIntoView(true);", attachments_header)

        # Find and download files
        print("Looking for attachment links...")
        attachment_links = driver.find_elements(By.CSS_SELECTOR, "a[href$='.pdf'], a[href$='.docx'], a[href$='.doc'], a[href$='.xlsx'], a[href$='.xls'], a[href$='.html']")
        if not attachment_links:
            print("‚ö†Ô∏è No attachments found.")
            continue

        case_folder = os.path.join(DOWNLOAD_DIR, case_id)
        os.makedirs(case_folder, exist_ok=True)

        for link in attachment_links:
            file_name = link.text.strip() or "downloaded_file"
            print(f"üîΩ Downloading: {file_name}")
            before_files = set(os.listdir(DOWNLOAD_DIR))
            link.click()

            downloaded = False
            for _ in range(WAIT_TIMEOUT):
                time.sleep(1)
                after_files = set(os.listdir(DOWNLOAD_DIR))
                new_files = after_files - before_files
                if new_files:
                    downloaded_file = new_files.pop()
                    os.rename(
                        os.path.join(DOWNLOAD_DIR, downloaded_file),
                        os.path.join(case_folder, downloaded_file)
                    )
                    print(f"‚úÖ Saved: {downloaded_file}")
                    downloaded = True
                    break

            if not downloaded:
                print(f"‚ùå Timeout: Download did not complete for {file_name}")

        print("Returning to Case Search...")
        driver.switch_to.default_content()
        driver.back()
        time.sleep(3)

    except Exception as e:
        print(f"‚ùå Error processing case {case_id}: {e}")
        traceback.print_exc()
        driver.switch_to.default_content()
        driver.get(PORTAL_URL)
        time.sleep(5)

driver.quit()
print("\n‚úÖ All done.")
