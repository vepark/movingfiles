from docx import Document
from docx.enum.section import WD_ORIENT
from docx.shared import Pt
import pandas as pd, re, os

# ───────── PATHS ────────────────────────────────────────────────
BASE = "/workspace2/cdar/data/discovery"        # ← adjust to your folder
template_path           = os.path.join(BASE, "Modified_Template.docx")

excel_main_path         = os.path.join(BASE, "Data_for_Discovery_template2.xlsx")
excel_customer_path     = os.path.join(BASE, "DPG_Customer_Info.xlsx")
excel_customer1_path    = os.path.join(BASE, "DPG_Customer_Info1.xlsx")
excel_transactions_path = os.path.join(BASE, "DPG_Transactions.xlsx")
excel_deposits_path     = os.path.join(BASE, "DPG_Deposits.xlsx")       # NEW

output_dir              = os.path.join(BASE, "new_output")

# ───────── label → column map (tuple keys for complaints) ──────
label_to_column = {
    "Case ID": "CaseID",
    "Case Owner": "CaseOwner",
    "Customer (Complainant) Name": "CustomerName",
    "Customer Number (ECN)": "ECN",
    "Original Note Summary": "OriginalNote",
    "Updated Note Summary": "UpdatedNote",
    "Response Bullet List": "ResponseBulletList",
    "<<RelatedCasesRecontact>>": "RelatedCasesRecontact",
    "<<CrossLineBusinessCase>>": "CrossLineBusinessCase",
    "<<CallReviews>>": "CallReviews",
    "<<RiskIndicators>>": "RiskIndicators",

    ("Primary Complaint",   "Enter Customer Problem and Description"):  "Primary_Description",
    ("Primary Complaint",   "List details from the complaint"):         "Primary_Details",
    ("Primary Complaint",   "Cite documents, tools, systems"):          "Primary_Citations",
    ("Primary Complaint",   "Summarize findings of the research"):      "Primary_Summary",

    ("Secondary Complaint", "Enter Customer Problem and Description"):  "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"):         "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"):          "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"):      "Secondary_Summary",

    ("Additional Complaint(s)", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint(s)", "List details from the complaint"):        "Additional_Details",
    ("Additional Complaint(s)", "Cite documents, tools, systems"):         "Additional_Citations",
    ("Additional Complaint(s)", "Summarize findings of the research"):     "Additional_Summary",

    "<<WF_TPError>>":  "WF_TPError",
    "<<ReliefType>>":  "ReliefType",
    "Enter reason for relief:": "Relief_Reason",
    "<<Resolution>>":  "Resolution",
    "Note Resolution:": "Resolution_Note"
}

# ───────── generic helpers ───────────────────────────────────────
def snake_to_camel(s): parts=s.split("_"); return parts[0].capitalize()+"".join(w.capitalize() for w in parts[1:])
trim_00 = lambda v: re.sub(r"\s00:00:00$","",v) if isinstance(v,str) else v

def force_font(table, pt=8):
    for row in table.rows:
        for cell in row.cells:
            for p in cell.paragraphs:
                for r in p.runs:
                    r.font.size = Pt(pt)

def add_blank_after(anchor, doc):
    blank = doc.add_paragraph()
    anchor.addnext(blank._p)
    return blank._p

# ───────── Section 1-3 helpers (unchanged) ───────────────────────
def fill_table_cells(table, vals):
    section = None
    for row in table.rows:
        for i, cell in enumerate(row.cells):
            txt = cell.text.strip()
            if txt in ("Primary Complaint", "Secondary Complaint", "Additional Complaint(s)"):
                section = txt; continue
            for key, col in label_to_column.items():
                if isinstance(key, tuple):
                    sec,prompt = key
                    if section==sec and txt.startswith(prompt) and i+1<len(row.cells):
                        row.cells[i+1].text = vals.get(col,"")
                elif txt.startswith(key) and i+1<len(row.cells):
                    row.cells[i+1].text = vals.get(col,"")

def replace_placeholders(doc, vals):
    for p in doc.paragraphs:
        for key,col in label_to_column.items():
            if isinstance(key,str) and key.startswith("<<") and key in p.text:
                for r in p.runs:
                    if key in r.text: r.text = r.text.replace(key, vals.get(col,""))
    for c in doc.tables[0]._cells:
        for key,col in label_to_column.items():
            if isinstance(key,str) and key.startswith("<<") and key in c.text:
                c.text = c.text.replace(key, vals.get(col,""))

# ───────── Section 4.1 helper (unchanged) ────────────────────────
def insert_customer_info(doc,cid,dfA,dfB):
    rows=[]
    for frame in (dfA,dfB):
        if frame.empty: continue
        rec=frame.drop(columns=["case_nr"],errors="ignore").iloc[0]
        rows.extend([(snake_to_camel(k), trim_00(str(v).strip()) if str(v).lower()!="nan" else "")
                     for k,v in rec.items()])
    if not rows: return
    tbl = doc.add_table(rows=1,cols=2); tbl.style="Table Grid"
    for j,h in enumerate(("Item","Value")):
        run = tbl.rows[0].cells[j].paragraphs[0].add_run(h); run.bold=True
    for it,val in rows:
        rw=tbl.add_row().cells; rw[0].text,it; rw[0].text=it; rw[1].text=val
    for row in tbl.rows:
        for cell in row.cells:
            for p in cell.paragraphs: p.paragraph_format.alignment=None
    for p in doc.paragraphs:
        if "<<Customer_Info>>" in p.text:
            p.clear(); p._p.addnext(tbl._tbl); break

# ───────── Section 4.2 helper (NEW) ──────────────────────────────
def insert_deposits(doc,cid,sheets):
    tag = next((p for p in doc.paragraphs if "<<Deposit_Info>>" in p.text), None)
    if not tag: return
    tag.clear()
    anchor = tag._p

    for df in sheets:
        part = df[df["case_nr"].astype(str).str.strip()==cid]
        if part.empty: continue
        part = part.drop(columns=["case_nr"]).applymap(trim_00)

        tbl = doc.add_table(rows=1, cols=len(part.columns)); tbl.style="Table Grid"
        for j,col in enumerate(part.columns):
            run=tbl.rows[0].cells[j].paragraphs[0].add_run(snake_to_camel(col))
            run.bold=True; run.font.size=Pt(8)
        for _,r in part.iterrows():
            cells=tbl.add_row().cells
            for j,col in enumerate(part.columns):
                txt="" if str(r[col]).lower()=="nan" else str(r[col])
                cells[j].text = txt
        force_font(tbl,8); tbl.autofit=True

        anchor.addnext(tbl._tbl); anchor = tbl._tbl
        anchor = add_blank_after(anchor, doc)

# ───────── Section 4.3 helper (portrait) ────────────────────────
def insert_transactions(doc,cid,sheets):
    tag = next((p for p in doc.paragraphs if "<<Holds and Funds>>" in p.text), None)
    if not tag: return
    tag.clear(); anchor=tag._p

    for df in sheets:
        part=df[df["case_nr"].astype(str).str.strip()==cid]
        if part.empty: continue
        part=part.drop(columns=["case_nr"]).applymap(trim_00)
        tbl=doc.add_table(rows=1,cols=len(part.columns)); tbl.style="Table Grid"
        for j,c in enumerate(part.columns):
            run=tbl.rows[0].cells[j].paragraphs[0].add_run(snake_to_camel(c))
            run.bold=True; run.font.size=Pt(8)
        for _,r in part.iterrows():
            cells=tbl.add_row().cells
            for j,c in enumerate(part.columns):
                txt="" if str(r[c]).lower()=="nan" else str(r[c])
                cells[j].text=txt
        force_font(tbl,8); tbl.autofit=True
        anchor.addnext(tbl._tbl); anchor=tbl._tbl
        anchor = add_blank_after(anchor, doc)

# ───────── generator ───────────────────────────────────────────
def generate():
    dm=pd.read_excel(excel_main_path,dtype=str).rename(columns=str.strip)

    def load_info(path):
        df=pd.read_excel(path,dtype=str); df.columns=df.columns.str.strip().str.lower(); return df
    dA,dB=load_info(excel_customer_path),load_info(excel_customer1_path)

    # transactions sheets
    s1=pd.read_excel(excel_transactions_path,sheet_name="Sheet1",dtype=str)
    s2=pd.read_excel(excel_transactions_path,sheet_name="Sheet2",dtype=str)
    s3=pd.read_excel(excel_transactions_path,sheet_name="Sheet3",dtype=str)
    s4=pd.read_excel(excel_transactions_path,sheet_name="Sheet4",dtype=str)
    for d in (s1,s2,s3,s4): d.columns=d.columns.str.strip().str.lower()

    # deposits sheets
    dps1=pd.read_excel(excel_deposits_path,sheet_name="Sheet1",dtype=str)
    dps2=pd.read_excel(excel_deposits_path,sheet_name="Sheet2",dtype=str)
    dps3=pd.read_excel(excel_deposits_path,sheet_name="Sheet3",dtype=str)
    for d in (dps1,dps2,dps3): d.columns=d.columns.str.strip().str.lower()

    os.makedirs(output_dir,exist_ok=True)

    for _,row in dm.iterrows():
        vals={c:("" if pd.isna(row[c]) else str(row[c]).strip()) for c in dm.columns}
        doc=Document(template_path)

        for tbl in doc.tables: fill_table_cells(tbl, vals)
        replace_placeholders(doc, vals)

        cid=str(row["CaseID"]).strip()
        insert_customer_info(doc,cid,
                             dA[dA["case_nr"].astype(str).str.strip()==cid],
                             dB[dB["case_nr"].astype(str).str.strip()==cid])
        insert_deposits(doc,cid,[dps1,dps2,dps3])      # ← NEW
        insert_transactions(doc,cid,[s1,s2,s3,s4])

        out=os.path.join(output_dir,f"DPG_Case_{cid}.docx")
        doc.save(out); print(out)

# ───────── run ──────────────────────────────────────────────────
if __name__=="__main__":
    generate()
