import os
import requests

def construct_repo_url(base_url, component1, component2):
    """
    Constructs the GitHub repository URL from the base URL and components.

    Args:
        base_url (str): The base URL of the repository.
        component1 (str): The first dynamic component.
        component2 (str): The second dynamic component.

    Returns:
        str: The constructed repository URL.
    """
    return f"{base_url}-{component1}-{component2}"

def get_default_branch(owner, repo, token):
    """
    Retrieves the default branch of the repository.

    Args:
        owner (str): The repository owner's username or organization name.
        repo (str): The repository name.
        token (str): GitHub Personal Access Token (PAT).

    Returns:
        str: The name of the default branch.
    """
    api_url = f"https://api.github.com/repos/{owner}/{repo}"
    headers = {"Authorization": f"token {token}"}
    response = requests.get(api_url, headers=headers)
    response.raise_for_status()
    repo_info = response.json()
    return repo_info.get("default_branch", "master")

def download_repo_contents(owner, repo, local_dir, token, branch=None):
    """
    Downloads all files and subfolders from the specified GitHub repository.

    Args:
        owner (str): The repository owner's username or organization name.
        repo (str): The repository name.
        local_dir (str): The local directory to save the downloaded contents.
        token (str): GitHub Personal Access Token (PAT).
        branch (str, optional): The branch name. Defaults to the default branch.

    Raises:
        Exception: If the repository contents cannot be retrieved or files cannot be downloaded.
    """
    if branch is None:
        branch = get_default_branch(owner, repo, token)

    api_url = f"https://api.github.com/repos/{owner}/{repo}/contents"
    headers = {"Authorization": f"token {token}"}

    def download_directory(contents_url, local_path):
        response = requests.get(contents_url, headers=headers)
        response.raise_for_status()
        contents = response.json()

        for item in contents:
            item_path = os.path.join(local_path, item['name'])
            if item['type'] == 'dir':
                os.makedirs(item_path, exist_ok=True)
                download_directory(item['url'], item_path)
            elif item['type'] == 'file':
                download_file(item['download_url'], item_path)

    def download_file(file_url, local_path):
        response = requests.get(file_url, headers=headers)
        response.raise_for_status()
        with open(local_path, 'wb') as file:
            file.write(response.content)
        print(f"Downloaded: {local_path}")

    os.makedirs(local_dir, exist_ok=True)
    download_directory(f"{api_url}?ref={branch}", local_dir)

if __name__ == "__main__":
    base_url = "https://github.wellsfargo.com/NonApp-crcoerem-CR"  # Base URL of the repository
    component1 = "21332570"  # First dynamic component
    component2 = "P01"  # Second dynamic component

    # Construct the repository URL
    repo_url = construct_repo_url(base_url, component1, component2)
    print(f"Repository URL: {repo_url}")

    # Extract owner and repo name from the URL
    owner = "NonApp-crcoerem"  # Replace with the actual owner if different
    repo = f"CR{component1}-{component2}"

    local_dir = r"C:\Users\u419556\OneDrive - Wells Fargo\Documents\python"  # Local directory to save files
    token = "your_personal_access_token"  # Replace with your GitHub Personal Access Token

    download_repo_contents(owner, repo, local_dir, token)
