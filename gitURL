import os
import requests

def download_github_file(repo_url, file_path, local_dir, token, branch=None):
    """
    Downloads a file from a GitHub repository and saves it locally.

    Args:
        repo_url (str): GitHub repository URL (e.g., 'https://github.com/username/repo').
        file_path (str): Path of the file in the repository (e.g., 'path/to/file.txt').
        local_dir (str): Local directory to save the downloaded file.
        token (str): GitHub Personal Access Token (PAT).
        branch (str, optional): Branch name (e.g., 'main', 'master'). Defaults to auto-detect.

    Raises:
        Exception: If the file cannot be downloaded.
    """

    # Auto-detect branch if not provided
    if not branch:
        api_url = f"{repo_url.replace('github.com', 'api.github.com/repos')}"
        headers = {"Authorization": f"token {token}"}

        try:
            response = requests.get(api_url, headers=headers)
            response.raise_for_status()
            branch = response.json().get("default_branch", "master")  # Default to master if not found
            print(f"Auto-detected branch: {branch}")
        except requests.exceptions.RequestException as e:
            raise Exception(f"Failed to detect default branch. Error: {e}")

    # Construct raw GitHub file URL
    raw_url = f"{repo_url.replace('github.com', 'raw.githubusercontent.com')}/{branch}/{file_path}"

    headers = {"Authorization": f"token {token}"}

    try:
        response = requests.get(raw_url, headers=headers)
        response.raise_for_status()  # Handle HTTP errors
    except requests.exceptions.HTTPError as http_err:
        if response.status_code == 404:
            raise Exception(f"File not found: {raw_url}")
        raise Exception(f"HTTP error occurred: {http_err}")
    except Exception as err:
        raise Exception(f"An error occurred: {err}")

    # Ensure the local directory exists
    os.makedirs(local_dir, exist_ok=True)

    # Define the local file path
    local_file_path = os.path.join(local_dir, os.path.basename(file_path))

    # Save the file
    with open(local_file_path, "wb") as local_file:
        local_file.write(response.content)

    print(f"File '{file_path}' has been downloaded successfully to '{local_file_path}'.")

if __name__ == "__main__":
    repo_url = ""
    file_path = ""  # Adjust the actual path in repo
    local_dir = r"C:\Users\OneDriveDocuments\python"
    token = "your_personal_access_token"  # Replace with actual PAT
    branch = None  # Auto-detect branch

    download_github_file(repo_url, file_path, local_dir, token, branch)
