import os, re, pandas as pd
from docx import Document
from docx.enum.section import WD_SECTION, WD_ORIENT

# ------------- PATHS -------------------------------------------------------
BASE = r"/workspace2/cdar/data/discovery"
template_path           = os.path.join(BASE, "Modified_Template.docx")
output_dir              = os.path.join(BASE, "new_output")
excel_main_path         = os.path.join(BASE, "Data_for_Discovery_template2.xlsx")
excel_customer_path     = os.path.join(BASE, "DPG_Customer_Info.xlsx")
excel_transactions_path = os.path.join(BASE, "DPG_Transactions.xlsx")

# ------------- LOAD EXCEL --------------------------------------------------
df_main     = pd.read_excel(excel_main_path,      dtype=str, engine="openpyxl")
df_customer = pd.read_excel(excel_customer_path,  dtype=str, engine="openpyxl")
df_s1       = pd.read_excel(excel_transactions_path, sheet_name="Sheet1", dtype=str, engine="openpyxl")
df_s2       = pd.read_excel(excel_transactions_path, sheet_name="Sheet2", dtype=str, engine="openpyxl")
df_s3       = pd.read_excel(excel_transactions_path, sheet_name="Sheet3", dtype=str, engine="openpyxl")

for d in (df_main, df_customer, df_s1, df_s2, df_s3):
    d.columns = d.columns.str.strip().str.lower()

# ------------- SECTION-1/3 MAPPING ----------------------------------------
label_to_column = {
    "case id":                     "caseid",
    "case owner":                  "caseowner",
    "customer (complainant) name": "customername",
    "customer number ecn":         "ecn",
    "authentication":              "authentication",
    "list system(s) utilized":     "listsystemsutilized",
    "what happened? note summary": "originalnote",
    "original note summary":       "originalnote",
    "updated note summary":        "updatednote",
    "response bullet list":        "responsebulletlist",
    "related cases recontact":     "relatedcasesrecontact",
    "cross line of business case": "crosslinebusinesscase",
    "call reviews":                "callreviews",
    "risk indicators":             "riskindicators",
}

# ------------- COMMON HELPERS ---------------------------------------------
def snake_to_camel(s):
    p = s.split("_")
    return p[0].capitalize() + "".join(w.capitalize() for w in p[1:])

def strip_time(df):
    return df.applymap(lambda x: re.sub(r"\s00:00:00$", "", str(x)) if isinstance(x, str) else x)

def wipe(runs):                                   # clear paragraph content
    for r in runs: r.text = ""

def add_tbl_after(doc, anchor, df):               # build Word table
    t = doc.add_table(rows=1, cols=len(df.columns))
    t.style = "Table Grid"
    for i, c in enumerate(df.columns):
        t.rows[0].cells[i].text = snake_to_camel(c)
    for _, r in df.iterrows():
        cells = t.add_row().cells
        for i, c in enumerate(df.columns):
            cells[i].text = str(r[c])
    el = t._tbl
    body = el.getparent()
    body.remove(el)
    anchor.addnext(el)
    return el

# ---------- portrait â†” landscape section utilities ------------------------
def start_landscape_block(doc):
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.LANDSCAPE
    sec.page_width, sec.page_height = sec.page_height, sec.page_width
    return sec

def end_portrait_block(doc):
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.PORTRAIT
    sec.page_width, sec.page_height = sec.page_height, sec.page_width
    return sec

# ---------- SECTION-1/3 FILLERS -------------------------------------------
def fill_table_right_cell(doc, row):
    for tbl in doc.tables:
        for r in tbl.rows:
            if len(r.cells) < 2:
                continue
            key = r.cells[0].text.strip().lower()
            if key in label_to_column:
                col = label_to_column[key]
                r.cells[1].text = "" if pd.isna(row[col]) else str(row[col])

def fill_text_placeholders(doc, row):
    def sub(text):
        for c in row.index:
            tag = f"<<{c.lower()}>>"
            if tag in text.lower():
                text = re.sub(re.escape(tag),
                              "" if pd.isna(row[c]) else str(row[c]),
                              text, flags=re.I)
        return text
    for p in doc.paragraphs:
        t2 = sub(p.text)
        if t2 != p.text:
            wipe(p.runs); p.add_run(t2)
    for tbl in doc.tables:
        for cell in tbl.cells:
            if "<<" in cell.text:
                cell.text = sub(cell.text)

# ---------- SECTION-4 HELPERS ---------------------------------------------
def insert_customer_info(doc, customer_df):
    if customer_df.empty:
        return
    r = customer_df.iloc[0].drop(labels=["case_nr"], errors="ignore")
    tdf = pd.DataFrame({"Item": [snake_to_camel(c) for c in r.index],
                        "Value": r.values})
    tag = "<<Customer_Info>>"
    low = tag.lower()
    for p in doc.paragraphs:
        if low in p.text.lower():
            wipe(p.runs)
            add_tbl_after(doc, p._p, tdf)
            break

def insert_transactions(doc, cid):
    # locate the placeholder paragraph
    tag = "<<Holds and Funds>>"
    ph_para = None
    for p in doc.paragraphs:
        if tag.lower() in p.text.lower():
            ph_para = p
            break
    if ph_para is None:
        return

    wipe(ph_para.runs)                      # remove placeholder text
    anchor = ph_para._p                     # we will insert AFTER this

    # open landscape section
    start_landscape_block(doc)

    # build Sheet1..3 tables
    for idx, sheet in enumerate((df_s1, df_s2, df_s3), 1):
        part = sheet[sheet["case_nr"].astype(str).str.strip() == cid]
        if part.empty:
            continue
        part = strip_time(part.drop(columns=["case_nr"]))
        if anchor is ph_para._p:
            anchor = add_tbl_after(doc, anchor, part)
        else:
            hdr = f"Transactions Sheet{idx}"
            para_hdr = doc.add_paragraph(hdr); para_hdr.bold = True
            para_el = para_hdr._p
            body = para_el.getparent(); body.remove(para_el); anchor.addnext(para_el)
            anchor = para_el
            anchor = add_tbl_after(doc, anchor, part)

    # close landscape, resume portrait
    end_portrait_block(doc)

# ---------- MAIN LOOP ------------------------------------------------------
os.makedirs(output_dir, exist_ok=True)

for _, rec in df_main.iterrows():
    cid = str(rec.get("caseid", "")).strip()
    doc = Document(template_path)

    fill_table_right_cell(doc, rec)
    fill_text_placeholders(doc, rec)

    cust = df_customer[df_customer["case_nr"].astype(str).str.strip() == cid]
    insert_customer_info(doc, cust)
    insert_transactions(doc, cid)

    out = os.path.join(output_dir, f"DPG_Case_{cid}.docx")
    doc.save(out)
    print("Created", out)
