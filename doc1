# -*- coding: utf-8 -*-

import os
import pandas as pd
from docx import Document
from docx.shared import Pt
from docx.enum.section import WD_SECTION, WD_ORIENT

# File paths

template_path = “/workspace2/cdar/data/discovery/Modified_Template.docx”
output_dir = “/workspace2/cdar/data/discovery/new_output”
excel_main_path = “/workspace2/cdar/data/discovery/Data_for_Discovery_template2.xlsx”
excel_customer_info_path = “/workspace2/cdar/data/discovery/DPG_Customer_Info.xlsx”
excel_transactions_path = “/workspace2/cdar/data/discovery/DPG_Transactions.xlsx”

# Load Excel data

df_main = pd.read_excel(excel_main_path, dtype=str, engine=‘openpyxl’)
df_customer = pd.read_excel(excel_customer_info_path, dtype=str, engine=‘openpyxl’)
df_sheet1 = pd.read_excel(excel_transactions_path, sheet_name=“Sheet1”, dtype=str, engine=‘openpyxl’)
df_sheet2 = pd.read_excel(excel_transactions_path, sheet_name=“Sheet2”, dtype=str, engine=‘openpyxl’)
df_sheet3 = pd.read_excel(excel_transactions_path, sheet_name=“Sheet3”, dtype=str, engine=‘openpyxl’)

# Normalize column names

df_main.columns = df_main.columns.str.strip().str.lower()
df_customer.columns = df_customer.columns.str.strip().str.lower()
df_sheet1.columns = df_sheet1.columns.str.strip().str.lower()
df_sheet2.columns = df_sheet2.columns.str.strip().str.lower()
df_sheet3.columns = df_sheet3.columns.str.strip().str.lower()

# Label mapping for sections 1-3

label_to_column = {
“case id:”: “caseid”,
“case owner:”: “caseowner”,
“customer (complainant) name:”: “customername”,
“customer number (ecn):”: “ecn”,
“original note summary:”: “originalnote”,
“updated note summary:”: “updatednote”,
“response bulleted list:”: “responsebulletlist”,
“<<relatedcasesrecontact>>”: “relatedcasesrecontact”,
“<<crosslinebusinesscase>>”: “crosslinebusinesscase”,
“<<callreviews>>”: “callreviews”,
“<<riskindicators>>”: “riskindicators”,
(“primary complaint”, “enter customer problem and description”): “primary_description”,
(“primary complaint”, “list details from the complaint”): “primary_details”,
(“primary complaint”, “cite documents, tools, systems”): “primary_citations”,
(“primary complaint”, “summarize findings of the research”): “primary_summary”,
(“secondary complaint”, “enter customer problem and description”): “secondary_description”,
(“secondary complaint”, “list details from the complaint”): “secondary_details”,
(“secondary complaint”, “cite documents, tools, systems”): “secondary_citations”,
(“secondary complaint”, “summarize findings of the research”): “secondary_summary”,
(“additional complaint(s)”, “enter customer problem and description”): “additional_description”,
(“additional complaint(s)”, “list details from the complaint”): “additional_details”,
(“additional complaint(s)”, “cite documents, tools, systems”): “additional_citations”,
(“additional complaint(s)”, “summarize findings of the research”): “additional_summary”,
“<<wf_tperror>>”: “wf_tperror”,
“<<relieftype>>”: “relieftype”,
“enter reason for relief”: “relief_reason”,
“<<resolutions>>”: “resolution”,
“note resolution”: “resolution_note”
}

def fill_table_right_cell(table, label_to_value):
section = None
for row in table.rows:
for i, cell in enumerate(row.cells):
text = cell.text.strip().lower()
if text in [“primary complaint”, “secondary complaint”, “additional complaint(s)”]:
section = text
for label, column in label_to_column.items():
if isinstance(label, tuple):
sec, start = label
if sec == section and text.startswith(start.lower()):
if i + 1 < len(row.cells):
row.cells[i + 1].text = str(label_to_value.get(column, “”))
elif text.startswith(label.lower()):
if i + 1 < len(row.cells):
row.cells[i + 1].text = str(label_to_value.get(column, “”))

def create_customer_info_table(doc, df_customer, case_id):
“”“Create a formatted customer information table”””
if “caseid” not in df_customer.columns:
return “Missing ‘caseid’ column in customer info.”

```
filtered = df_customer[df_customer["caseid"].astype(str).str.strip() == case_id]
if filtered.empty:
    return "No customer information found for this case ID."

row_data = filtered.iloc[0]

# Create table with customer information
table = doc.add_table(rows=1, cols=2)
table.style = 'Table Grid'
table.rows[0].cells[0].text = "Item"
table.rows[0].cells[1].text = "Value"

# Add customer information rows
for col in filtered.columns:
    if col != "caseid":
        row_cells = table.add_row().cells
        row_cells[0].text = col.title()
        row_cells[1].text = str(row_data[col]) if pd.notna(row_data[col]) else ""

return ""
```

def create_transaction_tables(doc, dfs, case_id):
“”“Create transaction tables for all sheets”””
transaction_content = “”

```
for i, df in enumerate(dfs, start=1):
    if "case_nr" not in df.columns:
        continue
        
    filtered = df[df["case_nr"].astype(str).str.strip() == case_id]
    if filtered.empty:
        continue
        
    # Add a heading for each sheet
    doc.add_paragraph(f"Transactions Sheet {i}").bold = True
    
    # Create table
    columns = [col for col in filtered.columns if col != "case_nr"]
    table = doc.add_table(rows=1, cols=len(columns))
    table.style = 'Table Grid'
    
    # Add headers
    for j, col in enumerate(columns):
        table.rows[0].cells[j].text = col.title()
    
    # Add data rows
    for _, row in filtered.iterrows():
        row_cells = table.add_row().cells
        for j, col in enumerate(columns):
            row_cells[j].text = str(row[col]) if pd.notna(row[col]) else ""

return ""
```

def fill_text_placeholders(doc, label_to_value, df_customer, transaction_dfs, case_id):
“”“Fill text placeholders including customer info and transaction data”””
for p in doc.paragraphs:
for label, column in label_to_column.items():
if isinstance(label, str) and label.startswith(”<<”) and label.endswith(”>>”):
if label.lower() in p.text.lower():
for run in p.runs:
if label.lower() in run.text.lower():
run.text = run.text.replace(label, str(label_to_value.get(column, “”)))

```
    # Handle Customer_Info placeholder
    if "<<Customer_Info>>" in p.text:
        # Clear the paragraph
        p.clear()
        # Insert customer info table after this paragraph
        create_customer_info_table(doc, df_customer, case_id)
    
    # Handle Holds and Funds placeholder  
    if "<<Holds and Funds>>" in p.text:
        # Clear the paragraph
        p.clear()
        # Insert transaction tables after this paragraph
        create_transaction_tables(doc, transaction_dfs, case_id)
```

# Create output directory

os.makedirs(output_dir, exist_ok=True)

# Generate documents

for _, row in df_main.iterrows():
label_to_value = {col.lower(): str(row[col]) if pd.notnull(row[col]) else “” for col in df_main.columns}
case_id = label_to_value.get(“caseid”, “”).zfill(16).strip()
if not case_id:
continue

```
doc = Document(template_path)

# Fill tables for sections 1-3
for table in doc.tables:
    fill_table_right_cell(table, label_to_value)

# Fill text placeholders including customer info and transactions
fill_text_placeholders(doc, label_to_value, df_customer, [df_sheet1, df_sheet2, df_sheet3], case_id)

output_file = os.path.join(output_dir, f"DPG_Case_{case_id}.docx")
doc.save(output_file)
```

print(“Documents generated successfully.”)
