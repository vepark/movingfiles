# -*- coding: utf-8 -*-
"""
One-stop script
 – Fills Sections 1-3 exactly like your original macro-style code.
 – Builds Section 4.1 as a two-column Customer-Info table (CamelCase items).
 – Builds Section 4.3 in its own LANDSCAPE section, three transaction tables
   with CamelCase headers and with “ 00:00:00” stripped from any dates.
"""

import os, re, pandas as pd
from docx import Document
from docx.enum.section import WD_SECTION, WD_ORIENT

# ───────────────────────────────────────────────────────── PATHS ────────────
BASE = r"/workspace2/cdar/data/discovery"
template_path           = os.path.join(BASE, "Modified_Template.docx")
output_dir              = os.path.join(BASE, "new_output")
excel_main_path         = os.path.join(BASE, "Data_for_Discovery_template2.xlsx")
excel_customer_path     = os.path.join(BASE, "DPG_Customer_Info.xlsx")
excel_transactions_path = os.path.join(BASE, "DPG_Transactions.xlsx")

# ───────────────────────────────────────────────────────── DATA ─────────────
df_main     = pd.read_excel(excel_main_path,      dtype=str, engine="openpyxl")
df_customer = pd.read_excel(excel_customer_path,  dtype=str, engine="openpyxl")
df_s1       = pd.read_excel(excel_transactions_path, sheet_name="Sheet1", dtype=str, engine="openpyxl")
df_s2       = pd.read_excel(excel_transactions_path, sheet_name="Sheet2", dtype=str, engine="openpyxl")
df_s3       = pd.read_excel(excel_transactions_path, sheet_name="Sheet3", dtype=str, engine="openpyxl")

for d in (df_main, df_customer, df_s1, df_s2, df_s3):
    d.columns = d.columns.str.strip().str.lower()

# ─────────────────────────────────── SECTION-1 / 3 LABEL MAP (original) ─────
label_to_column = {
    "case id": "caseid",
    "case owner": "caseowner",
    "customer (complainant) name": "customername",
    "customer number ecn": "ecn",
    "authentication": "authentication",
    "list system(s) utilized": "listsystemsutilized",
    "original note summary": "originalnote",
    "updated note summary": "updatednote",
    "response bullet list": "responsebulletlist",
    "related cases recontact": "relatedcasesrecontact",
    "crosslinebusinesscase": "crosslinebusinesscase",
    "callreviews": "callreviews",
    "riskindicators": "riskindicators",
    "primary complaint": "primary_description",
    "list details from the complaint": "primary_details",
    "cite documents, tools, systems": "primary_citations",
    "summarize findings of the research": "primary_summary",
    "secondary complaint": "secondary_description",
    "list details from the complaint": "secondary_details",
    "cite documents, tools, systems": "secondary_citations",
    "summarize findings of the research": "secondary_summary",
    "additional complaint(s)": "additional_description",
    "list details from the complaint": "additional_details",
    "cite documents, tools, systems": "additional_citations",
    "summarize findings of the research": "additional_summary",
    "wf tperror": "wftperror",
    "relieftype": "relieftype",
    "enter reason for relief": "relief_reason",
    "resolution": "resolution",
    "note resolution": "resolution_note",
}

# ─────────────────────────────────── HELPERS (common) ───────────────────────
def snake_to_camel(s):
    parts = s.split("_")
    return parts[0].capitalize() + "".join(p.capitalize() for p in parts[1:])

def strip_time(df):
    return df.applymap(lambda x: re.sub(r"\s00:00:00$", "", str(x))
                       if isinstance(x, str) else x)

def wipe_runs(runs):
    for r in runs:
        r.text = ""

def add_table_after(doc, anchor, dataframe):
    tbl = doc.add_table(rows=1, cols=len(dataframe.columns))
    tbl.style = "Table Grid"
    for i, col in enumerate(dataframe.columns):
        tbl.rows[0].cells[i].text = snake_to_camel(col)
    for _, r in dataframe.iterrows():
        cells = tbl.add_row().cells
        for i, col in enumerate(dataframe.columns):
            cells[i].text = str(r[col])
    el = tbl._tbl
    body = el.getparent()
    body.remove(el)
    anchor.addnext(el)
    return el

def start_landscape(doc):
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.LANDSCAPE
    sec.page_width, sec.page_height = sec.page_height, sec.page_width
    return sec

def end_portrait(doc):
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.PORTRAIT
    sec.page_width, sec.page_height = sec.page_height, sec.page_width
    return sec

# ─────────────────────────────────── SECTION-1 / 3 FUNCTIONS ───────────────
def fill_table_right_cell(doc, row):
    for tbl in doc.tables:
        for tr in tbl.rows:                      # iterate rows (safe API)
            if len(tr.cells) < 2:
                continue
            key = tr.cells[0].text.strip().lower()
            if key in label_to_column:
                col = label_to_column[key]
                tr.cells[1].text = "" if pd.isna(row[col]) else str(row[col])

def fill_text_placeholders(doc, row):
    def replace(text):
        for col in row.index:
            ph = f"<<{col.lower()}>>"
            if ph in text.lower():
                text = re.sub(re.escape(ph),
                              "" if pd.isna(row[col]) else str(row[col]),
                              text, flags=re.I)
        return text
    for p in doc.paragraphs:
        new = replace(p.text)
        if new != p.text:
            wipe_runs(p.runs)
            p.add_run(new)
    for tbl in doc.tables:
        for tr in tbl.rows:
            for cell in tr.cells:
                if "<<" in cell.text:
                    cell.text = replace(cell.text)

# ─────────────────────────────────── SECTION-4.1 CUSTOMER INFO ─────────────
def insert_customer_info(doc, customer_df):
    if customer_df.empty:
        return
    row = customer_df.iloc[0].drop(labels=["case_nr"], errors="ignore")
    tdf = pd.DataFrame({
        "Item": [snake_to_camel(c) for c in row.index],
        "Value": row.values
    })
    for p in doc.paragraphs:
        if "<<customer_info>>" in p.text.lower():
            wipe_runs(p.runs)
            add_table_after(doc, p._p, tdf)
            break

# ─────────────────────────────────── SECTION-4.3 TRANSACTIONS ──────────────
def insert_transactions(doc, case_id):
    # locate placeholder paragraph first
    ph_para = next((p for p in doc.paragraphs
                    if "<<holds and funds>>" in p.text.lower()), None)
    if ph_para is None:
        return
    wipe_runs(ph_para.runs)

    # open landscape block
    start_landscape(doc)
    anchor = ph_para._p

    for idx, sheet in enumerate((df_s1, df_s2, df_s3), 1):
        part = sheet[sheet["case_nr"].astype(str).str.strip() == case_id]
        if part.empty:
            continue
        part = strip_time(part.drop(columns=["case_nr"]))
        if anchor is ph_para._p:
            anchor = add_table_after(doc, anchor, part)
        else:
            hdr = doc.add_paragraph(f"Transactions Sheet{idx}")
            hdr.bold = True
            hdr_el = hdr._p
            body = hdr_el.getparent()
            body.remove(hdr_el)
            anchor.addnext(hdr_el)
            anchor = hdr_el
            anchor = add_table_after(doc, anchor, part)

    # back to portrait
    end_portrait(doc)

# ─────────────────────────────────── MAIN LOOP ─────────────────────────────
os.makedirs(output_dir, exist_ok=True)

for _, rec in df_main.iterrows():
    case_id = str(rec.get("caseid", "")).strip()
    doc = Document(template_path)

    fill_table_right_cell(doc, rec)
    fill_text_placeholders(doc, rec)

    cus = df_customer[df_customer["case_nr"].astype(str).str.strip() == case_id]
    insert_customer_info(doc, cus)

    insert_transactions(doc, case_id)

    out_file = os.path.join(output_dir, f"DPG_Case_{case_id}.docx")
    doc.save(out_file)
    print("Created", out_file)
