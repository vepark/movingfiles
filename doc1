import os, re, pandas as pd
from docx import Document
from docx.enum.section import WD_SECTION, WD_ORIENT

# Paths
BASE = "/workspace2/cdar/data/discovery"
template_path = os.path.join(BASE, "Modified_Template.docx")
output_dir = os.path.join(BASE, "new_output")
excel_main_path = os.path.join(BASE, "Data_for_Discovery_template2.xlsx")
excel_customer_path = os.path.join(BASE, "DPG_Customer_Info.xlsx")
excel_transactions_path = os.path.join(BASE, "DPG_Transactions.xlsx")

# Load data
df_main = pd.read_excel(excel_main_path, dtype=str, engine="openpyxl")
df_customer = pd.read_excel(excel_customer_path, dtype=str, engine="openpyxl")
df_s1 = pd.read_excel(excel_transactions_path, sheet_name="Sheet1", dtype=str, engine="openpyxl")
df_s2 = pd.read_excel(excel_transactions_path, sheet_name="Sheet2", dtype=str, engine="openpyxl")
df_s3 = pd.read_excel(excel_transactions_path, sheet_name="Sheet3", dtype=str, engine="openpyxl")

# Clean columns
df_main.columns = df_main.columns.str.strip()
df_customer.columns = df_customer.columns.str.strip()
for d in (df_s1, df_s2, df_s3):
    d.columns = d.columns.str.strip().str.lower()

# Label mapping
label_to_column = {
    "Case ID": "CaseID",
    "Case Owner": "CaseOwner",
    "Customer (Complainant) Name": "CustomerName",
    "Customer Number (ECN)": "ECN",
    "Original Note Summary": "OriginalNote",
    "Updated Note Summary": "UpdatedNote",
    "Response Bullet List": "ResponseBulletList",
    "Related Cases Recontact": "RelatedCasesRecontact",
    "CrossLineBusinessCase": "CrossLineBusinessCase",
    "CallReviews": "CallReviews",
    "RiskIndicators": "RiskIndicators",
    "Primary Complaint": "Primary_Description",
    "List details from the complaint": "Primary_Details",
    "Cite documents, tools, systems": "Primary_Citations",
    "Summarize findings of the research": "Primary_Summary",
    "Secondary Complaint": "Secondary_Description",
    "List details from the complaint (2)": "Secondary_Details",
    "Cite documents, tools, systems (2)": "Secondary_Citations",
    "Summarize findings of the research (2)": "Secondary_Summary",
    "Additional Complaint(s)": "Additional_Description",
    "List details from the complaint (3)": "Additional_Details",
    "Cite documents, tools, systems (3)": "Additional_Citations",
    "Summarize findings of the research (3)": "Additional_Summary",
    "WF_TPError": "WF_TPError",
    "ReliefType": "ReliefType",
    "Enter reason for relief": "Relief_Reason",
    "Resolution": "Resolution",
    "Note Resolution": "Resolution_Note"
}

# Section 1-3 functions
def fill_table_right_cell(doc, label_to_value):
    section_marker = None
    for table in doc.tables:
        for row in table.rows:
            for i, cell in enumerate(row.cells):
                text = cell.text.strip()
                if text in ["Primary Complaint", "Secondary Complaint", "Additional Complaint(s)"]:
                    section_marker = text
                for label, column in label_to_column.items():
                    if section_marker:
                        if text.startswith(label) and section_marker in label:
                            if i + 1 < len(row.cells):
                                row.cells[i + 1].text = label_to_value.get(column, "")
                    elif text.startswith(label):
                        if i + 1 < len(row.cells):
                            row.cells[i + 1].text = label_to_value.get(column, "")

def fill_text_placeholders(doc, label_to_value):
    for p in doc.paragraphs:
        for label, col in label_to_column.items():
            if f"<<{label}>>" in p.text:
                for r in p.runs:
                    r.text = r.text.replace(f"<<{label}>>", label_to_value.get(col, ""))
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for label, col in label_to_column.items():
                    if f"<<{label}>>" in cell.text:
                        cell.text = cell.text.replace(f"<<{label}>>", label_to_value.get(col, ""))

# Section 4 helpers
def snake_to_camel(s):
    parts = s.split("_")
    return parts[0].capitalize() + "".join(p.capitalize() for p in parts[1:])

def strip_time(df):
    return df.applymap(lambda x: re.sub(r"\s00:00:00$", "", str(x)) if isinstance(x, str) else x)

def wipe(runs):
    for r in runs:
        r.text = ""

def add_table_after(doc, anchor, df):
    t = doc.add_table(rows=1, cols=len(df.columns))
    t.style = "Table Grid"
    for i, c in enumerate(df.columns):
        t.rows[0].cells[i].text = snake_to_camel(c)
    for _, r in df.iterrows():
        row_cells = t.add_row().cells
        for i, c in enumerate(df.columns):
            row_cells[i].text = str(r[c])
    el = t._tbl
    body = el.getparent()
    body.remove(el)
    anchor.addnext(el)
    return el

def insert_customer_info(doc, customer_df):
    if customer_df.empty:
        return
    r = customer_df.iloc[0].drop(labels=["Case_Nr"], errors="ignore")
    tdf = pd.DataFrame({
        "Item": [snake_to_camel(c) for c in r.index],
        "Value": r.values
    })
    for p in doc.paragraphs:
        if "<<Customer_Info>>" in p.text:
            wipe(p.runs)
            add_table_after(doc, p._p, tdf)
            break

def insert_transactions(doc, cid):
    ph = next((p for p in doc.paragraphs if "<<Holds and Funds>>" in p.text), None)
    if ph is None:
        return
    wipe(ph.runs)
    anchor = ph._p
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.LANDSCAPE
    sec.page_width, sec.page_height = sec.page_height, sec.page_width
    for idx, sheet in enumerate((df_s1, df_s2, df_s3), 1):
        part = sheet[sheet["case_nr"].astype(str).str.strip() == cid]
        if part.empty:
            continue
        part = strip_time(part.drop(columns=["case_nr"]))
        if anchor is ph._p:
            anchor = add_table_after(doc, anchor, part)
        else:
            hdr = doc.add_paragraph(f"Transactions Sheet{idx}")
            hdr.bold = True
            hdr_el = hdr._p
            body = hdr_el.getparent()
            body.remove(hdr_el)
            anchor.addnext(hdr_el)
            anchor = hdr_el
            anchor = add_table_after(doc, anchor, part)
    sec = doc.add_section(WD_SECTION.NEW_PAGE)
    sec.orientation = WD_ORIENT.PORTRAIT
    sec.page_width, sec.page_height = sec.page_height, sec.page_width

# Main loop
os.makedirs(output_dir, exist_ok=True)
for _, row in df_main.iterrows():
    doc = Document(template_path)
    label_to_value = {col: str(row[col]).strip() if pd.notnull(row[col]) else "" for col in df_main.columns}
    fill_table_right_cell(doc, label_to_value)
    fill_text_placeholders(doc, label_to_value)
    cid = str(row["CaseID"]).strip()
    cust_rows = df_customer[df_customer["Case_Nr"].astype(str).str.strip() == cid]
    insert_customer_info(doc, cust_rows)
    insert_transactions(doc, cid)
    out_path = os.path.join(output_dir, f"DPG_Case_{cid}.docx")
    doc.save(out_path)
    print("Created", out_path)
