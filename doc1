# -*- coding: utf-8 -*-
"""
 • Sections 1-3:   original behaviour; no forced lower-casing on df_main
 • Section 4.1:    two-column Customer-Info table (CamelCase labels)
 • Section 4.3:    NEW-PAGE landscape block, three transaction tables
                   (CamelCase headers, time ‘ 00:00:00’ stripped)
"""

import os, re, pandas as pd
from docx import Document
from docx.enum.section import WD_SECTION, WD_ORIENT


# ──────────────── PATHS ────────────────
BASE = r"/workspace2/cdar/data/discovery"
template_path           = os.path.join(BASE, "Modified_Template.docx")
output_dir              = os.path.join(BASE, "new_output")

excel_main_path         = os.path.join(BASE, "Data_for_Discovery_template2.xlsx")
excel_customer_path     = os.path.join(BASE, "DPG_Customer_Info.xlsx")
excel_transactions_path = os.path.join(BASE, "DPG_Transactions.xlsx")


# ──────────────── LOAD EXCEL ───────────
df_main = pd.read_excel(excel_main_path, dtype=str, engine="openpyxl")
df_main.columns = df_main.columns.str.strip()              # KEEP ORIGINAL CASE

df_customer = pd.read_excel(excel_customer_path, dtype=str, engine="openpyxl")
df_customer.columns = df_customer.columns.str.strip().str.lower()

df_s1 = pd.read_excel(excel_transactions_path, sheet_name="Sheet1", dtype=str, engine="openpyxl")
df_s2 = pd.read_excel(excel_transactions_path, sheet_name="Sheet2", dtype=str, engine="openpyxl")
df_s3 = pd.read_excel(excel_transactions_path, sheet_name="Sheet3", dtype=str, engine="openpyxl")
for d in (df_s1, df_s2, df_s3):
    d.columns = d.columns.str.strip().str.lower()


# ──────────────── LABEL MAP (exactly as before) ──────────
label_to_column = {
    "Case ID":                     "CaseID",
    "Case Owner":                  "CaseOwner",
    "Customer (Complainant) Name": "CustomerName",
    "Customer Number ECN":         "ECN",
    "Authentication":              "Authentication",
    "List system(s) utilized":     "ListSystemsUtilized",
    "What happened? Note Summary": "OriginalNote",
    "Original Note Summary":       "OriginalNote",
    "Updated Note Summary":        "UpdatedNote",
    "Response Bullet List":        "ResponseBulletList",
    "Related Cases Recontact":     "RelatedCasesRecontact",
    "CrossLineBusinessCase":       "CrossLineBusinessCase",
    "CallReviews":                 "CallReviews",
    "RiskIndicators":              "RiskIndicators",
    #   … add any other left-cell labels you use …
}


# ──────────────── COMMON HELPERS ───────
def snake_to_camel(s):
    parts = s.split("_")
    return parts[0].capitalize() + "".join(p.capitalize() for p in parts[1:])

def strip_time(df):
    return df.applymap(lambda x: re.sub(r"\s00:00:00$", "", str(x))
                       if isinstance(x, str) else x)

def wipe_runs(runs):
    for r in runs:
        r.text = ""

def add_table_after(doc, anchor, dataframe):
    tbl = doc.add_table(rows=1, cols=len(dataframe.columns))
    tbl.style = "Table Grid"
    for i, col in enumerate(dataframe.columns):
        tbl.rows[0].cells[i].text = snake_to_camel(col)
    for _, row in dataframe.iterrows():
        cells = tbl.add_row().cells
        for i, col in enumerate(dataframe.columns):
            cells[i].text = str(row[col])
    el = tbl._tbl
    body = el.getparent()
    body.remove(el)
    anchor.addnext(el)
    return el

def start_landscape(doc):
    s = doc.add_section(WD_SECTION.NEW_PAGE)
    s.orientation = WD_ORIENT.LANDSCAPE
    s.page_width, s.page_height = s.page_height, s.page_width
    return s

def end_portrait(doc):
    s = doc.add_section(WD_SECTION.NEW_PAGE)
    s.orientation = WD_ORIENT.PORTRAIT
    s.page_width, s.page_height = s.page_height, s.page_width
    return s


# ──────────────── SECTION 1-3 FUNCTIONS ─
def fill_table_right_cell(doc, row):
    for tbl in doc.tables:
        for tr in tbl.rows:
            if len(tr.cells) < 2:
                continue
            label_text = tr.cells[0].text.strip()
            if label_text in label_to_column:
                col = label_to_column[label_text]
                tr.cells[1].text = "" if pd.isna(row[col]) else str(row[col])

def fill_text_placeholders(doc, row):
    def repl(txt):
        for col in row.index:
            ph = f"<<{col}>>"
            if ph in txt:
                txt = txt.replace(ph, "" if pd.isna(row[col]) else str(row[col]))
        return txt
    for p in doc.paragraphs:
        new = repl(p.text)
        if new != p.text:
            wipe_runs(p.runs)
            p.add_run(new)
    for tbl in doc.tables:
        for tr in tbl.rows:
            for cell in tr.cells:
                if "<<" in cell.text:
                    cell.text = repl(cell.text)


# ──────────────── SECTION 4.1 ───────────
def insert_customer_info(doc, customer_df):
    if customer_df.empty:
        return
    r = customer_df.iloc[0].drop(labels=["case_nr"], errors="ignore")
    tdf = pd.DataFrame({
        "Item":  [snake_to_camel(c) for c in r.index],
        "Value": r.values
    })
    for p in doc.paragraphs:
        if "<<Customer_Info>>" in p.text:
            wipe_runs(p.runs)
            add_table_after(doc, p._p, tdf)
            break


# ──────────────── SECTION 4.3 ───────────
def insert_transactions(doc, cid):
    ph = next((p for p in doc.paragraphs if "<<Holds and Funds>>" in p.text), None)
    if ph is None:
        return
    wipe_runs(ph.runs)
    anchor = ph._p

    start_landscape(doc)

    for idx, sheet in enumerate((df_s1, df_s2, df_s3), 1):
        part = sheet[sheet["case_nr"].astype(str).str.strip() == cid]
        if part.empty:
            continue
        part = strip_time(part.drop(columns=["case_nr"]))
        if anchor is ph._p:
            anchor = add_table_after(doc, anchor, part)
        else:
            hdr = doc.add_paragraph(f"Transactions Sheet{idx}")
            hdr.bold = True
            hdr_el = hdr._p
            body = hdr_el.getparent()
            body.remove(hdr_el)
            anchor.addnext(hdr_el)
            anchor = hdr_el
            anchor = add_table_after(doc, anchor, part)

    end_portrait(doc)


# ──────────────── MAIN LOOP ─────────────
os.makedirs(output_dir, exist_ok=True)

for _, rec in df_main.iterrows():
    cid = str(rec["CaseID"]).strip()
    doc = Document(template_path)

    fill_table_right_cell(doc, rec)
    fill_text_placeholders(doc, rec)

    cust_rows = df_customer[df_customer["case_nr"].astype(str).str.strip() == cid]
    insert_customer_info(doc, cust_rows)

    insert_transactions(doc, cid)

    out_path = os.path.join(output_dir, f"DPG_Case_{cid}.docx")
    doc.save(out_path)
    print("Created", out_path)
