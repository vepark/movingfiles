import os
import pandas as pd
from docx import Document

template_path = r"/workspace2/cdar/data/discovery/Modified_Template.docx"
output_dir = r"/workspace2/cdar/data/discovery/new_output"
excel_main_path = r"/workspace2/cdar/data/discovery/Data_for_Discovery_template2.xlsx"
excel_customer_path = r"/workspace2/cdar/data/discovery/DPG_Customer_Info.xlsx"
excel_transactions_path = r"/workspace2/cdar/data/discovery/DPG_Transactions.xlsx"

df_main = pd.read_excel(excel_main_path, dtype=str, engine="openpyxl")
df_customer = pd.read_excel(excel_customer_path, dtype=str, engine="openpyxl")
df_sheet1 = pd.read_excel(excel_transactions_path, sheet_name="Sheet1", dtype=str, engine="openpyxl")
df_sheet2 = pd.read_excel(excel_transactions_path, sheet_name="Sheet2", dtype=str, engine="openpyxl")
df_sheet3 = pd.read_excel(excel_transactions_path, sheet_name="Sheet3", dtype=str, engine="openpyxl")

for d in (df_main, df_customer, df_sheet1, df_sheet2, df_sheet3):
    d.columns = d.columns.str.strip().str.lower()

def insert_df_as_table_at_tag(doc, tag, df):
    tag_lc = tag.lower()
    for p in doc.paragraphs:
        if tag_lc in p.text.lower():
            _delete(p.runs, tag)
            return _table_after(doc, p._p, df)
    for tbl in doc.tables:
        for cell in tbl.cells:
            if tag_lc in cell.text.lower():
                _delete(cell.paragraphs[0].runs, tag)
                return _table_after(doc, cell._tc, df)
    return None

def _delete(runs, tag):
    tag_lc = tag.lower()
    for r in runs:
        if tag_lc in r.text.lower():
            r.text = r.text.replace(tag, "")

def _table_after(doc, anchor, df):
    t = doc.add_table(rows=1, cols=len(df.columns))
    t.style = "Table Grid"
    for i, c in enumerate(df.columns):
        t.rows[0].cells[i].text = str(c)
    for _, row in df.iterrows():
        cells = t.add_row().cells
        for i, c in enumerate(df.columns):
            cells[i].text = str(row[c])
    el = t._tbl
    body = el.getparent()
    body.remove(el)
    anchor.addnext(el)
    return el

def add_table_after(doc, anchor, df, heading=None):
    if heading:
        p = doc.add_paragraph(heading)
        p.bold = True
        pel = p._p
        body = pel.getparent()
        body.remove(pel)
        anchor.addnext(pel)
        anchor = pel
    return _table_after(doc, anchor, df)

def insert_transactions(doc, tag, sheets, case_id):
    anchor = None
    for idx, df in enumerate(sheets, 1):
        f = df[df["case_nr"].astype(str).str.strip() == case_id]
        if f.empty:
            continue
        if anchor is None:
            anchor = insert_df_as_table_at_tag(doc, tag, f.drop(columns=["case_nr"]))
        else:
            hdr = "Transactions Sheet{}".format(idx)
            anchor = add_table_after(doc, anchor, f.drop(columns=["case_nr"]), hdr)

os.makedirs(output_dir, exist_ok=True)

for _, rec in df_main.iterrows():
    case_id = str(rec.get("caseid", "")).strip()
    doc = Document(template_path)
    cust = df_customer[df_customer["case_nr"].astype(str).str.strip() == case_id]
    if not cust.empty:
        insert_df_as_table_at_tag(doc, "<<Customer_Info>>", cust.drop(columns=["case_nr"]))
    insert_transactions(doc, "<<Holds and Funds>>", [df_sheet1, df_sheet2, df_sheet3], case_id)
    out_path = os.path.join(output_dir, "DPG_Case_{}.docx".format(case_id))
    doc.save(out_path)
    print("Created {}".format(out_path))
