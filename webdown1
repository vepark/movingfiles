import os
import time
import pandas as pd
import shutil
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# ----------- CONFIGURATION -----------
EXCEL_FILE = r'C:\Users\u419556\OneDrive - Wells Fargo\Desktop\case_nr.xlsx'
CASE_ID_COLUMN = 'Case_nr'
PORTAL_URL = 'https://hop.wf.com/ecmp-case-management'
DOWNLOAD_DIR = os.path.join(os.getcwd(), 'downloads')
CHROME_DRIVER_PATH = r'C:\Users\u419556\.cache\selenium\chromedriver\win64\133.0.6943.141\chromedriver.exe'
WAIT_TIMEOUT = 30

# Interactive mode flag
INTERACTIVE_MODE = True  # Set to False for background operation

class InteractiveDemoCaseAutomation:
    def __init__(self, download_folder=DOWNLOAD_DIR, interactive=True):
        self.download_folder = download_folder
        self.interactive = interactive
        self.driver = None
        self.wait = None
        
        # Create download directory
        os.makedirs(self.download_folder, exist_ok=True)
        
    def interactive_pause(self, message):
        """Pause execution for user interaction if in interactive mode"""
        if self.interactive:
            input(f"\n[INTERACTIVE] {message}\nPress Enter to continue...")
        else:
            print(f"[AUTO] {message}")
            time.sleep(2)
    
    def setup_chrome_driver(self):
        """Setup Chrome driver with download preferences"""
        print("Setting up Chrome driver...")
        
        options = Options()
        prefs = {
            "download.default_directory": self.download_folder,
            "download.prompt_for_download": False,
            "plugins.always_open_pdf_externally": True
        }
        options.add_experimental_option("prefs", prefs)
        
        if not self.interactive:
            options.add_argument("--headless")
            
        service = Service(CHROME_DRIVER_PATH)
        self.driver = webdriver.Chrome(service=service, options=options)
        self.wait = WebDriverWait(self.driver, WAIT_TIMEOUT)
        self.driver.maximize_window()
        
        print("Chrome driver setup complete!")
        
    def login_and_navigate(self):
        """Navigate to portal and handle automatic SSO"""
        print("Navigating to portal...")
        self.driver.get(PORTAL_URL)
        
        self.interactive_pause("SSO should be automatic. Check if main page loaded.")
        
        # Wait for Case Search to be available
        try:
            case_search_element = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//*[@id='menu-1748025697888']/li[2]/a/span/span"))
            )
            print("✓ Main application loaded successfully!")
            return True
        except TimeoutException:
            print("✗ Timeout waiting for main application")
            return False
    
    def click_case_search(self):
        """Click on Case Search in navigation"""
        try:
            print("Clicking Case Search...")
            case_search = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//*[@id='menu-1748025697888']/li[2]/a/span/span"))
            )
            case_search.click()
            time.sleep(2)
            
            self.interactive_pause("Case Search page should be loaded. Check the search form.")
            print("✓ Case Search clicked successfully!")
            return True
        except Exception as e:
            print(f"✗ Error clicking Case Search: {e}")
            return False
    
    def search_case(self, case_id):
        """Search for a specific case by entering case ID"""
        try:
            print(f"Searching for case: {case_id}")
            
            # Find and clear the case input field
            case_input = self.wait.until(
                EC.visibility_of_element_located((By.XPATH, "//*[@id='774c51e8']"))
            )
            
            self.interactive_pause(f"About to enter case ID: {case_id}")
            
            # Type slowly into input (character by character)
            case_input.clear()
            for char in str(case_id):
                case_input.send_keys(char)
                time.sleep(0.05)  # Small delay between characters
            
            self.interactive_pause(f"Case ID '{case_id}' entered. Check if it appears correctly.")
            
            # Click search button
            search_button = self.driver.find_element(By.XPATH, "//*[@id='EXPAND-OUTERFRAME']/div[2]/div/div[3]/span/button")
            search_button.click()
            
            time.sleep(3)
            self.interactive_pause("Search submitted. Check if results appeared.")
            
            print("✓ Case search completed!")
            return True
            
        except Exception as e:
            print(f"✗ Error searching for case {case_id}: {e}")
            return False
    
    def expand_case_details(self):
        """Click arrow to expand case details"""
        try:
            print("Expanding case details...")
            
            # Try to find and click the expand arrow
            expand_arrow = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//*[@id='$PpyWorkPage$pCaseSearch$pSearchResults$l1']/td[1]/span"))
            )
            expand_arrow.click()
            time.sleep(2)
            
            self.interactive_pause("Case details should be expanded. Look for View Case button.")
            print("✓ Case details expanded!")
            return True
            
        except Exception as e:
            print(f"✗ Error expanding case details: {e}")
            return False
    
    def click_view_case(self):
        """Click View Case button"""
        try:
            print("Clicking View Case...")
            
            view_case = self.wait.until(
                EC.element_to_be_clickable((By.XPATH, "//*[@id='RULE_KEY']/div/div/div/div[1]/span/button"))
            )
            view_case.click()
            time.sleep(3)
            
            self.interactive_pause("View Case clicked. Check if attachments section is visible.")
            print("✓ View Case clicked!")
            return True
            
        except Exception as e:
            print(f"✗ Error clicking View Case: {e}")
            return False
    
    def scroll_to_attachments(self):
        """Scroll to attachments section"""
        try:
            print("Scrolling to attachments...")
            
            attach_section = self.wait.until(
                EC.presence_of_element_located((By.XPATH, "//*[@id='EXPAND-OUTERFRAME']/div[2]"))
            )
            self.driver.execute_script("arguments[0].scrollIntoView(true);", attach_section)
            time.sleep(2)
            
            self.interactive_pause("Scrolled to attachments section. Can you see the files?")
            print("✓ Scrolled to attachments!")
            return True
            
        except Exception as e:
            print(f"✗ Error scrolling to attachments: {e}")
            return False
    
    def download_attachments(self, case_id):
        """Download all attachments for the case"""
        try:
            print("Looking for downloadable attachments...")
            
            # Find all downloadable links
            attachment_links = self.driver.find_elements(
                By.CSS_SELECTOR, 
                "a[href*='.pdf'], a[href*='.xlsx'], a[href*='.xls'], a[href*='.docx']"
            )
            
            if not attachment_links:
                print("No attachments found.")
                return False
            
            # Create case folder
            case_folder = os.path.join(self.download_folder, str(case_id))
            os.makedirs(case_folder, exist_ok=True)
            
            print(f"Found {len(attachment_links)} attachments")
            
            for i, link in enumerate(attachment_links, 1):
                try:
                    file_name = link.text.strip() or f'downloaded_file_{i}'
                    print(f"Downloading: {file_name}")
                    
                    if self.interactive:
                        input(f"Press Enter to download file {i}: {file_name}")
                    
                    # Get files before download
                    before_files = set(os.listdir(self.download_folder))
                    
                    # Click download link
                    link.click()
                    
                    # Wait for download to complete
                    downloaded = False
                    for _ in range(30):  # Wait up to 30 seconds
                        time.sleep(1)
                        after_files = set(os.listdir(self.download_folder))
                        new_files = after_files - before_files
                        if new_files:
                            downloaded_file = list(new_files)[0]
                            # Move to case folder
                            shutil.move(
                                os.path.join(self.download_folder, downloaded_file),
                                os.path.join(case_folder, downloaded_file)
                            )
                            print(f"✓ Saved to: {case_folder}")
                            downloaded = True
                            break
                    
                    if not downloaded:
                        print(f"✗ Timeout waiting for download: {file_name}")
                        
                except Exception as e:
                    print(f"✗ Error downloading attachment {i}: {e}")
                    continue
            
            print(f"✓ All attachments processed for case {case_id}")
            return True
            
        except Exception as e:
            print(f"✗ Error in download_attachments: {e}")
            return False
    
    def process_single_case(self, case_id):
        """Process a single case end-to-end"""
        print(f"\n{'='*50}")
        print(f"Processing Case: {case_id}")
        print(f"{'='*50}")
        
        try:
            # Step 1: Click Case Search
            if not self.click_case_search():
                return False
            
            # Step 2: Search for case
            if not self.search_case(case_id):
                return False
            
            # Step 3: Expand case details
            if not self.expand_case_details():
                return False
            
            # Step 4: Click View Case
            if not self.click_view_case():
                return False
            
            # Step 5: Scroll to attachments
            if not self.scroll_to_attachments():
                return False
            
            # Step 6: Download attachments
            if not self.download_attachments(case_id):
                return False
            
            print(f"✓ Case {case_id} processed successfully!")
            
            # Go back for next case
            if self.interactive:
                input("Press Enter to go back for next case...")
            
            self.driver.back()
            time.sleep(2)
            self.driver.back()
            time.sleep(2)
            
            return True
            
        except Exception as e:
            print(f"✗ Error processing case {case_id}: {e}")
            return False
    
    def read_case_list(self):
        """Read case list from Excel file"""
        try:
            df = pd.read_excel(EXCEL_FILE, dtype={CASE_ID_COLUMN: str})
            case_list = df[CASE_ID_COLUMN].astype(str).tolist()
            return case_list
        except Exception as e:
            print(f"Error reading Excel file: {e}")
            return []
    
    def run_automation(self):
        """Main automation function"""
        try:
            # Setup
            self.setup_chrome_driver()
            
            # Login
            if not self.login_and_navigate():
                return
            
            # Read cases
            case_list = self.read_case_list()
            if not case_list:
                print("No cases found in Excel file")
                return
            
            print(f"Found {len(case_list)} cases to process")
            
            if self.interactive:
                response = input(f"Process all {len(case_list)} cases? (y/n): ")
                if response.lower() != 'y':
                    # Process single case for testing
                    test_case = case_list[0] if case_list else input("Enter test case ID: ")
                    self.process_single_case(test_case)
                    return
            
            # Process all cases
            for i, case_id in enumerate(case_list, 1):
                print(f"\n--- Processing case {i}/{len(case_list)}: {case_id} ---")
                
                try:
                    success = self.process_single_case(case_id)
                    if not success:
                        print(f"Failed to process case {case_id}, continuing...")
                        continue
                        
                except Exception as e:
                    print(f"Error processing case {case_id}: {e}")
                    continue
            
            print("\n" + "="*50)
            print("All cases processed!")
            print("="*50)
            
        except Exception as e:
            print(f"Automation error: {e}")
        finally:
            if self.driver:
                if self.interactive:
                    input("Press Enter to close browser...")
                self.driver.quit()

def main():
    """Run the interactive automation"""
    print("Demo Case Management Automation")
    print("="*50)
    
    # Ask for interactive mode
    mode = input("Run in interactive mode? (y/n, default=y): ").strip().lower()
    interactive = mode != 'n'
    
    automation = InteractiveDemoCaseAutomation(interactive=interactive)
    automation.run_automation()

if __name__ == "__main__":
    main()
