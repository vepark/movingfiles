import pandas as pd
from docx import Document
import os

# Load Excel data
df = pd.read_excel("C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\sample_case_data1.xlsx", 
                   dtype={"CaseID": str})

# Load the template
template_path = "C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\sample_research_template1.docx"

# Output directory
output_dir = "C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\GeneratedDocs\\"
os.makedirs(output_dir, exist_ok=True)

# Corrected label-to-column mapping
label_to_column = {
    "Case ID:": "CaseID",
    "Case Owner:": "CaseOwner",
    "Customer (Complainant) Name:": "CustomerName",
    "Customer Number (ECN):": "ECN",
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bullet List:": "ResponseBulletList",

    # Primary Complaint
    "Enter Customer Problem and Description from Complaints Taxonomy or the Customer Problem Matrix - 296R": "Primary_Description",
    "List details from the complaint that support identification": "Primary_Details",
    "Cite documents, tools, systems, screens, call recordings and/or other information used to research the customer problem": "Primary_Citations",
    "Summarize findings of the research": "Primary_Summary",

    # Secondary Complaint
    "Enter Customer Problem and Description from Complaints Taxonomy or the Customer Problem Matrix - 296R": "Secondary_Description",
    "List details from the complaint that support identification": "Secondary_Details",
    "Cite documents, tools, systems, screens, call recordings and/or other information used to research the customer problem": "Secondary_Citations",
    "Summarize findings of the research": "Secondary_Summary",

    # Additional Complaint
    "Enter Customer Problem and Description": "Additional_Description",
    "List details from the complaint": "Additional_Details",
    "Cite documents, tools, systems": "Additional_Citations",
    "Summarize findings of the research": "Additional_Summary",

    # Redress and Resolution
    "Enter reason for relief:": "Relief_Reason",
    "Note Resolution:": "Resolution_Note"
}

# Function to fill right-hand cells
def fill_table_right_cell(table, label_to_value, label_to_column):
    try:
        section_title = table.rows[0].cells[0].text.strip()
    except:
        section_title = ""

    for row in table.rows:
        for i, cell in enumerate(row.cells):
            label = cell.text.strip()

            key = (section_title, label)
            if key in label_to_column:
                col = label_to_column[key]
            elif label in label_to_column:
                col = label_to_column[label]
            else:
                continue  # unmatched

            value = label_to_value.get(col, "")
            if i + 1 < len(row.cells):
                row.cells[i + 1].text = str(value)
                print(f"Filled: '{label}' -> '{value}'")

# Main loop to generate documents
for idx, row in df.iterrows():
    doc = Document(template_path)

    # Prepare row-specific dictionary
    label_to_value = {
        col_key: str(row[col_val]).strip() if pd.notnull(row[col_val]) else ""
        for col_key, col_val in label_to_column.items()
    }

    # Fill each table
    for table in doc.tables:
        fill_table_right_cell(table, label_to_value, label_to_column)

    # Save output
    case_id = str(row["CaseID"]).zfill(16)
    output_path = os.path.join(output_dir, f"Case_{case_id}.docx")
    doc.save(output_path)
    print(f"Saved: {output_path}")

print("\nAll documents generated successfully.")
