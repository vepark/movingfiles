import pandas as pd
from docx import Document
import os

# Load Excel data
df = pd.read_excel("C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\sample_case_data1.xlsx",
                   dtype={"CaseID": str})

# Word template path
template_path = "C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\sample_research_template.docx"

# Output folder
output_dir = "C:\\Users\\u419556\\OneDrive - Wells Fargo\\Documents\\Discovery_Evidence\\GeneratedDocs\\"
os.makedirs(output_dir, exist_ok=True)

# Label-to-column mapping with both (section, label) and label-only support
label_to_column = {
    # First page
    "Case ID:": "CaseID",
    "Case Owner:": "CaseOwner",
    "Customer (Complainant) Name:": "CustomerName",
    "Customer Number (ECN):": "ECN",
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bullet List:": "ResponseBulletList",

    # Page 2 - use tuples for section + label
    ("Primary Complaint", "Enter Customer Problem and Description"): "Primary_Description",
    ("Primary Complaint", "List details from the complaint"): "Primary_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "Primary_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "Primary_Summary",

    ("Secondary Complaint", "Enter Customer Problem and Description"): "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"): "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"): "Secondary_Summary",

    ("Additional Complaint(s)", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint(s)", "List details from the complaint"): "Additional_Details",
    ("Additional Complaint(s)", "Cite documents, tools, systems"): "Additional_Citations",
    ("Additional Complaint(s)", "Summarize findings of the research"): "Additional_Summary",

    # Page 3
    "Enter reason for relief:": "Relief_Reason",
    "Note Resolution:": "Resolution_Note"
}

# Fill cell values into Word table
def fill_table_right_cell(table, label_to_value, label_to_column):
    try:
        section_title = table.rows[0].cells[0].text.strip()
    except:
        section_title = ""

    for row in table.rows:
        for i, cell in enumerate(row.cells):
            label = cell.text.strip()

            # Try section-aware key first
            key = (section_title, label)
            if key in label_to_column:
                col = label_to_column[key]
            elif label in label_to_column:
                col = label_to_column[label]
            else:
                continue  # no match

            value = label_to_value.get(col, "")
            if i + 1 < len(row.cells):
                row.cells[i + 1].text = str(value)
                print(f"Filled: [{section_title}] '{label}' -> '{value}'")

# Main loop
for idx, row in df.iterrows():
    doc = Document(template_path)

    # Map each field to value for this row
    label_to_value = {
        col_key: str(row[col_val]).strip() if pd.notnull(row[col_val]) else ""
        for col_key, col_val in label_to_column.items()
    }

    for table in doc.tables:
        fill_table_right_cell(table, label_to_value, label_to_column)

    # Save file
    case_id = str(row["CaseID"]).zfill(16)
    output_path = os.path.join(output_dir, f"Case_{case_id}.docx")
    doc.save(output_path)
    print(f"[Saved] {output_path}")

print("\nAll documents generated successfully.")
