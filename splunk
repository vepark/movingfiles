import splunklib.client as client
import splunklib.results as results
import pandas as pd

# Splunk connection details
SPLUNK_HOST = "your_splunk_host"  # e.g., "splunk.mycompany.com"
SPLUNK_PORT = 8089               # Default management port for Splunk
USERNAME = "your_username"
PASSWORD = "your_password"

# Splunk search query
SPLUNK_QUERY = r"""
search index=wf_pvsi_other wf_id=EB5CL wf_env=PROD sourcetype="wf:ebscl:main.txt" RefMsgNm="*submitClaim*"
| rex field=_raw max_match=1 "\\\\r\\\"ECN\\\":\\\"(?<ECN>.*?)\\\""
| rex field=_raw max_match=1 "customerClaimNbr\\\":\\\"(?<claimNumber>[0-9]+)\\\""
| rex field=_raw max_match=1 "claimType\\\":\\\"(?<claimType>.*?)\\\""
| rex field=_raw max_match=1 "SORName\\\":\\\"(?<SORName>.*?)\\\""
| rex field=_raw max_match=1 "crDecision\\\":\\\"(?<crDecision>.*?)\\\""
| rex field=_raw max_match=0 "referenceNumber\\\":\\\"(?<refNbr>.*?)\\\""
| rex field=_raw max_match=0 "messageData\\\":\\\"(?<MsgData>.*?)\\\""
| rex field=_raw max_match=1 "crAmount\\\":\\\"(?<crAmount>.*?)\\\""
| search crDecision="Provisional Credit" AND SORName="LU"
| rename DT AS claimDateTime
| table ECN claimType SORName claimNumber crDecision refNbr crAmount claimDateTime MsgData
"""


# Connect to Splunk
try:
    service = client.connect(
        host=SPLUNK_HOST,
        port=SPLUNK_PORT,
        username=USERNAME,
        password=PASSWORD
    )
    print("Connected to Splunk successfully.")
except Exception as e:
    print(f"Failed to connect to Splunk: {e}")
    exit()

# Run the search query
try:
    job = service.jobs.create(SPLUNK_QUERY, exec_mode="blocking")
    print("Query executed successfully.")
except Exception as e:
    print(f"Failed to execute the query: {e}")
    exit()

# Retrieve results
results_reader = results.ResultsReader(job.results(output_mode="json"))

# Parse results into a list of dictionaries
data = [result for result in results_reader if isinstance(result, dict)]

# Convert to a DataFrame
df = pd.DataFrame(data)

# Save to CSV
output_file = "splunk_results.csv"
df.to_csv(output_file, index=False)
print(f"Results saved to {output_file}")




import splunklib.client as client
import splunklib.results as results

# Splunk Connection Details
HOST = "your_splunk_host"
PORT = 8089
USERNAME = "your_username"
PASSWORD = "your_password"
SPLUNK_QUERY = """
search index=wf_pvsi_other wf_id=EB5CL wf_env=PROD sourcetype="wf:ebscl:main.txt" RefMsgNm="*submitClaim*" earliest="2024-04-01T00:00:00" latest="2024-04-02T00:00:00"
| rex field=_raw max_match=1 "\\r\"ECN\":\"(?<ECN>.*?)\""
| rex field=_raw max_match=1 "customerClaimNbr\":\"(?<claimNumber>[0-9]+)\""
| rex field=_raw max_match=1 "claimType\":\"(?<claimType>.*?)\""
| rex field=_raw max_match=1 "SORName\":\"(?<SORName>.*?)\""
| rex field=_raw max_match=1 "crDecision\":\"(?<crDecision>.*?)\""
| rex field=_raw max_match=0 "referenceNumber\":\"(?<refNbr>.*?)\""
| rex field=_raw max_match=0 "messageData\":\"(?<MsgData>.*?)\""
| rex field=_raw max_match=1 "crAmount\":\"(?<crAmount>.*?)\""
| search crDecision="Provisional Credit" AND SORName="LU"
| rename DT AS claimDateTime
| table ECN claimType SORName claimNumber crDecision refNbr crAmount claimDateTime MsgData
"""

# Connect to Splunk
service = client.connect(
    host=HOST,
    port=PORT,
    username=USERNAME,
    password=PASSWORD
)

# Run the search query
job = service.jobs.create(SPLUNK_QUERY)

# Wait for the job to complete
while not job.is_done():
    pass

# Use JSONResultsReader
for result in results.JSONResultsReader(job.results(output_mode="json")):
    if isinstance(result, dict):  # Ensure it's a valid result
        print(result)
