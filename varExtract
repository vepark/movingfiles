import re
import csv

def parse_sas_code(file_path):
    # Regular expressions to extract information
    table_alias_pattern = re.compile(r"(\w+\.\w+)\s+(as\s+)?(\w+)", re.IGNORECASE)
    select_pattern = re.compile(r"select\s+(.*?)\s+from", re.IGNORECASE | re.DOTALL)
    join_pattern = re.compile(r"join\s+\w+\.\w+\s+\w+\s+on\s+(.*?)\s+where", re.IGNORECASE | re.DOTALL)
    where_pattern = re.compile(r"where\s+(.*?)\s*(group\s+by|order\s+by|$)", re.IGNORECASE | re.DOTALL)

    # Open and read the file
    with open(file_path, 'r') as file:
        code = file.read()

    # Extract information
    table_aliases = table_alias_pattern.findall(code)
    tables = {alias[2]: alias[0] for alias in table_aliases}  # Alias to table mapping

    select_vars = select_pattern.findall(code)
    select_vars = [var.strip().split(',') for var in select_vars]
    select_vars = [var.strip() for sublist in select_vars for var in sublist]

    join_vars = join_pattern.findall(code)
    join_vars = [var.strip().split('=') for var in join_vars]
    join_vars = [var.strip() for sublist in join_vars for var in sublist]

    where_vars = where_pattern.findall(code)
    where_vars = [var[0].strip().split('and') for var in where_vars]
    where_vars = [var.strip() for sublist in where_vars for var in sublist]

    # Format results for CSV
    results = []
    for alias, table in tables.items():
        for var in select_vars:
            if var.startswith(f"{alias}."):
                results.append([table, var, '', ''])
        for var in join_vars:
            if var.startswith(f"{alias}."):
                results.append([table, '', var, ''])
        for var in where_vars:
            if var.startswith(f"{alias}."):
                results.append([table, '', '', var])

    return results

def write_to_csv(data, output_file):
    headers = ["Database_TableNames", "Select_Var", "Join_Var", "Where_Var"]
    with open(output_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(headers)
        writer.writerows(data)

# Example usage
file_path = "path_to_your_sas_file.sas"
output_file = "output.csv"
parsed_data = parse_sas_code(file_path)
write_to_csv(parsed_data, output_file)
print(f"Extracted data has been written to {output_file}")
