import zipfile
import os
import re
import csv

def extract_egp(egp_path, output_dir):
    """Extracts the .egp file into a specified directory."""
    with zipfile.ZipFile(egp_path, 'r') as zip_ref:
        zip_ref.extractall(output_dir)
    print(f"Extracted .egp file to {output_dir}")

def find_sas_files(directory):
    """Finds all .sas files in the extracted .egp directory."""
    sas_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.sas'):
                sas_files.append(os.path.join(root, file))
    return sas_files

def parse_sas_code(file_path):
    # Enhanced regular expressions to extract information
    table_alias_pattern = re.compile(r"(\w+\.\w+)\s+(?:as\s+)?(\w+)", re.IGNORECASE)
    select_pattern = re.compile(r"select\s+(.*?)\s+from", re.IGNORECASE | re.DOTALL)
    join_pattern = re.compile(r"join\s+(\w+\.\w+)\s+(?:as\s+)?(\w+).*?on\s+(.*?)\s+(where|group|order|$)", re.IGNORECASE | re.DOTALL)
    where_pattern = re.compile(r"where\s+(.*?)\s*(group\s+by|order\s+by|$)", re.IGNORECASE | re.DOTALL)

    with open(file_path, 'r') as file:
        code = file.read()

    # Extract tables and aliases
    table_aliases = table_alias_pattern.findall(code)
    tables = {alias[1]: alias[0] for alias in table_aliases}  # Alias to table mapping

    # Extract SELECT variables
    select_vars = []
    for match in select_pattern.findall(code):
        vars_in_select = match.strip().split(',')
        select_vars.extend(var.strip() for var in vars_in_select)

    # Extract JOIN variables
    join_vars = []
    join_tables = {}
    for match in join_pattern.findall(code):
        table, alias, condition, _ = match
        join_tables[alias] = table
        vars_in_condition = re.split(r'and|or', condition)
        join_vars.extend(var.strip() for var in vars_in_condition)

    # Extract WHERE variables
    where_vars = []
    for match in where_pattern.findall(code):
        condition = match[0]
        vars_in_condition = re.split(r'and|or', condition)
        where_vars.extend(var.strip() for var in vars_in_condition)

    # Combine results
    results = []
    all_aliases = {**tables, **join_tables}
    for alias, table in all_aliases.items():
        for var in select_vars:
            if var.startswith(f"{alias}."):
                results.append([table, var, '', ''])
        for var in join_vars:
            if var.startswith(f"{alias}."):
                results.append([table, '', var, ''])
        for var in where_vars:
            if var.startswith(f"{alias}."):
                results.append([table, '', '', var])

    return results

def write_to_csv(data, output_file):
    headers = ["Database_TableNames", "Select_Var", "Join_Var", "Where_Var"]
    with open(output_file, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(headers)
        writer.writerows(data)

def process_file(file_path, output_csv, temp_dir="temp_extracted"):
    """Handles both .sas and .egp files dynamically."""
    if file_path.endswith('.egp'):
        print("Processing .egp file...")
        extract_egp(file_path, temp_dir)
        sas_files = find_sas_files(temp_dir)
    elif file_path.endswith('.sas'):
        print("Processing .sas file...")
        sas_files = [file_path]
    else:
        raise ValueError("Unsupported file type. Please provide a .sas or .egp file.")

    all_data = []
    for sas_file in sas_files:
        all_data.extend(parse_sas_code(sas_file))
    
    write_to_csv(all_data, output_csv)
    print(f"Data extracted and written to {output_csv}")

# Example usage
file_path = "path_to_your_file.sas"  # Change to your .sas or .egp file path
output_csv = "output.csv"
process_file(file_path, output_csv)
