from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import os
import time
import pandas as pd
from datetime import datetime

# Initialize Chrome WebDriver
service = webdriver.chrome.service.Service()  # Auto-detect path to ChromeDriver
driver = webdriver.Chrome(service=service)

# Define Tableau URL
tableau_url = "https://tableau.com"  # Replace with actual URL

# Folder to save downloaded file
download_folder = os.path.expanduser("~/Downloads")

try:
    # Open Tableau dashboard
    driver.get(tableau_url)
    print("Opened Tableau dashboard.")

    # Wait for iframe and switch to it
    WebDriverWait(driver, 60).until(EC.presence_of_element_located((By.TAG_NAME, "iframe")))
    iframe = driver.find_element(By.TAG_NAME, "iframe")
    driver.switch_to.frame(iframe)
    print("Switched to iframe.")

    # Wait for 'Download' button (down arrow) and click it
    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH, "//*[@id='download']"))).click()
    print("Clicked the 'Download' button.")

    # Wait for 'Crosstab' option and click it
    retries = 3
    for _ in range(retries):
        try:
            crosstab_option = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//span[text()='Crosstab']"))
            )
            driver.execute_script("arguments[0].click();", crosstab_option)  # Ensure click is registered
            print("Selected 'Crosstab'.")
            break
        except Exception as e:
            print(f"Retrying 'Crosstab' selection due to: {e}")
    else:
        raise Exception("Failed to select 'Crosstab' after retries.")

    # Wait for the final 'Download' button in the popup and click it
    download_button_final = WebDriverWait(driver, 30).until(
        EC.element_to_be_clickable(
            (By.XPATH, "//*[@id='export-crosstab-options-dialog-Dialog-BodyWrapper-Dialog-Body-Id']/div/div[3]/button")
        )
    )
    driver.execute_script("arguments[0].click();", download_button_final)  # Ensure click is registered
    print("Clicked the final 'Download' button.")

    # Wait for the file to download
    time.sleep(10)  # Adjust time based on file size
    print("Waiting for the download to complete...")

    # Rename the downloaded file with a unique suffix
    downloaded_file = None
    for file in os.listdir(download_folder):
        if file.endswith(".crdownload") or file.endswith(".xlsx"):
            downloaded_file = os.path.join(download_folder, file)
            if file.endswith(".crdownload"):
                suffix = datetime.now().strftime("%Y%m%d_%H%M%S")  # Timestamp suffix
                final_file = os.path.join(download_folder, f"exported_data_{suffix}.xlsx")
                os.rename(downloaded_file, final_file)
                print(f"File renamed to '{final_file}'")
            else:
                final_file = os.path.join(
                    download_folder, f"exported_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                )
                os.rename(downloaded_file, final_file)

    if not downloaded_file:
        raise Exception("Download failed or file not found.")

    # Load the downloaded file into a pandas DataFrame
    df = pd.read_excel(final_file)
    print("Excel file loaded into DataFrame successfully.")
    print(df.head())  # Display the first few rows of the DataFrame for verification

except Exception as e:
    print(f"Error occurred: {e}")
finally:
    # Close the browser
    driver.quit()
