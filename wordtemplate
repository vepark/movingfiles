import pandas as pd
from docx import Document
import os

# Load Excel data (preserve leading zeros in CaseID)
df = pd.read_excel("sample_case_data.xlsx", dtype={"CaseID": str})

# Word template and output folder
template_path = "research_template.docx"
output_dir = "GeneratedDocs"
os.makedirs(output_dir, exist_ok=True)

# Label to Excel column map
label_to_column = {
    # No-section labels
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bullet List:": "ResponseBulletList",

    # Case Info
    ("Case Information", "Case ID:"): "CaseID",
    ("Case Information", "Case Owner:"): "CaseOwner",
    ("Case Information", "Customer (Complainant) Name:"): "CustomerName",
    ("Case Information", "Customer Number (ECN):"): "ECN",

    # Primary Complaint
    ("Primary Complaint", "Enter Customer Problem and Description"): "Primary_Description",
    ("Primary Complaint", "List details from the complaint"): "Primary_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "Primary_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "Primary_Summary",

    # Secondary Complaint
    ("Secondary Complaint", "Enter Customer Problem and Description"): "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"): "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"): "Secondary_Summary",

    # Additional Complaint
    ("Additional Complaint", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint", "List details from the complaint"): "Additional_Details",
    ("Additional Complaint", "Cite documents, tools, systems"): "Additional_Citations",
    ("Additional Complaint", "Summarize findings of the research"): "Additional_Summary",
}

# Function to fill right-side cells based on section and label or label only
def fill_table_right_cell(table, label_to_value, label_to_column):
    section_title = table.rows[0].cells[0].text.strip()

    for row in table.rows:
        for i, cell in enumerate(row.cells):
            label = cell.text.strip()

            # Match full (section, label) key first, then plain label
            key = (section_title, label)
            if key in label_to_column:
                col = label_to_column[key]
            elif label in label_to_column:
                col = label_to_column[label]
            else:
                continue  # skip unmatched

            value = label_to_value.get(col, "")
            if i + 1 < len(row.cells):
                row.cells[i + 1].text = str(value)
                print(f"Filled: [{section_title}] '{label}' â†’ '{value}'")

# Main loop to process each row in Excel
for idx, row in df.iterrows():
    doc = Document(template_path)

    # Build dictionary of all Excel values for this row
    label_to_value = {
        col_key: str(row[col_val]).strip() if pd.notnull(row[col_val]) else ""
        for col_key, col_val in label_to_column.items()
    }

    # Fill all tables
    for table in doc.tables:
        fill_table_right_cell(table, label_to_value, label_to_column)

    # Save document with padded CaseID
    case_id = str(row["CaseID"]).zfill(16)
    output_path = os.path.join(output_dir, f"Case_{case_id}.docx")
    doc.save(output_path)

print("All documents generated successfully.")
