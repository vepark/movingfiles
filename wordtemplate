from docx import Document
import pandas as pd
import os

# Map Word labels to Excel columns
label_to_column = {
    "Case ID:": "CaseID",
    "Case Owner:": "CaseOwner",
    "Customer (Complainant) Name:": "CustomerName",
    "Customer Number (ECN):": "ECN",
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bulleted List:": "ResponseBulletList",
    "<<RelatedCasesRecontact>>": "RelatedCasesRecontact",
    "<<CrossLineBusinessCase>>": "CrossLineBusinessCase",
    "<<CallReviews>>": "CallReviews",
    "<<RiskIndicators>>": "RiskIndicators",
    ("Primary Complaint", "Enter Customer Problem and Description"): "Primary_Description",
    ("Primary Complaint", "List details from the complaint"): "Primary_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "Primary_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "Primary_Summary",
    ("Secondary Complaint", "Enter Customer Problem and Description"): "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"): "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"): "Secondary_Summary",
    ("Additional Complaint(s)", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint(s)", "List details from the complaint"): "Additional_Details",
    ("Additional Complaint(s)", "Cite documents, tools, systems"): "Additional_Citations",
    ("Additional Complaint(s)", "Summarize findings of the research"): "Additional_Summary",
    "<<WF_TPError>>": "WF_TPError",
    "<<ReliefType>>": "ReliefType",
    "Enter reason for relief:": "Relief_Reason",
    "<<Resolution>>": "Resolution",
    "Note Resolution:": "Resolution_Note",
}

# Fill table cells based on label-to-value mapping
def fill_table_right_cell(table, label_to_value):
    section = None
    for row in table.rows:
        for i, cell in enumerate(row.cells):
            text = cell.text.strip()
            if text in ["Primary Complaint", "Secondary Complaint", "Additional Complaint(s)"]:
                section = text
            for label, column in label_to_column.items():
                if isinstance(label, tuple):
                    sec, start = label
                    if sec == section and text.startswith(start):
                        if i + 1 < len(row.cells):
                            row.cells[i + 1].text = str(label_to_value.get(column, ""))
                else:
                    if text.startswith(label):
                        if i + 1 < len(row.cells):
                            row.cells[i + 1].text = str(label_to_value.get(column, ""))

# Replace <<placeholders>> in paragraph text
def fill_text_placeholders(doc, label_to_value):
    for p in doc.paragraphs:
        for label, column in label_to_column.items():
            if isinstance(label, str) and label.startswith("<<") and label.endswith(">>"):
                if label in p.text:
                    for run in p.runs:
                        if label in run.text:
                            run.text = run.text.replace(label, str(label_to_value.get(column, "")))

# Main function to run for all cases
def generate_documents(excel_path, template_path, output_dir):
    os.makedirs(output_dir, exist_ok=True)
    df = pd.read_excel(excel_path, dtype={"CaseID": str})
    for _, row in df.iterrows():
        label_to_value = {col: str(row[col]).strip() if pd.notnull(row[col]) else "" for col in df.columns}
        doc = Document(template_path)
        for table in doc.tables:
            fill_table_right_cell(table, label_to_value)
        fill_text_placeholders(doc, label_to_value)
        case_id = str(row["CaseID"]).zfill(16)
        output_file = os.path.join(output_dir, f"Case_{case_id}.docx")
        doc.save(output_file)
    print("All documents created successfully.")

generate_documents("Updated_DPG_Auto_sample_data_for_template1.xlsx",
                   "Updated_AWB_sample_research_template2.docx",
                   "output")
