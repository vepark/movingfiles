

import pandas as pd
from docx import Document
import os

# Load Excel data
df = pd.read_excel("sample_case_data.xlsx", dtype={"CaseID": str})

# Paths
template_path = "research_template.docx"
output_dir = "GeneratedDocs"
os.makedirs(output_dir, exist_ok=True)

# Label to Excel column map, indexed by (Section Title, Label)
label_to_column = {
    # Case Info section (non-sectioned)
    ("Case Information", "Case ID:"): "CaseID",
    ("Case Information", "Case Owner:"): "CaseOwner",
    ("Case Information", "Customer (Complainant) Name:"): "CustomerName",
    ("Case Information", "Customer Number (ECN):"): "ECN",

    # Primary Complaint
    ("Primary Complaint", "Enter Customer Problem and Description"): "PrimaryComplaint_Description",
    ("Primary Complaint", "List details from the complaint"): "PrimaryComplaint_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "PrimaryComplaint_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "PrimaryComplaint_Summary",

    # Secondary Complaint
    ("Secondary Complaint", "Enter Customer Problem and Description"): "SecondaryComplaint_Description",
    ("Secondary Complaint", "List details from the complaint"): "SecondaryComplaint_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "SecondaryComplaint_Citations",

    # Additional Complaint
    ("Additional Complaint", "Enter Customer Problem and Description"): "AdditionalComplaint_Description",
    ("Additional Complaint", "List details from the complaint"): "AdditionalComplaint_Details",
    ("Additional Complaint", "Cite documents, tools, systems"): "AdditionalComplaint_Citations"
}

# Function to fill table cells based on section title and label
def fill_table_right_cell(table, label_to_value, label_to_column):
    section_title = table.rows[0].cells[0].text.strip()  # top-left cell as section title

    for row in table.rows:
        for i, cell in enumerate(row.cells):
            label = cell.text.strip()
            key = (section_title, label)
            if key in label_to_column:
                col = label_to_column[key]
                value = label_to_value.get(col, "")
                if i + 1 < len(row.cells):
                    row.cells[i + 1].text = str(value)

# Main loop
for idx, row in df.iterrows():
    doc = Document(template_path)

    # Build dictionary of all values for this row
    label_to_value = {
        col_key: str(row[col_val]).strip() if pd.notnull(row[col_val]) else ""
        for col_key, col_val in label_to_column.items()
    }

    # Process every table in the Word document
    for table in doc.tables:
        fill_table_right_cell(table, label_to_value, label_to_column)

    # Save output with leading zeros preserved (e.g., 16-digit CaseID)
    case_id = str(row["CaseID"]).zfill(16)
    doc.save(os.path.join(output_dir, f"Case_{case_id}.docx"))

print("All documents created successfully.")
