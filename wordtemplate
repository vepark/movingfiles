import pandas as pd
from docx import Document
import os

# File paths
os.makedirs(output_dir, exist_ok=True)

# Mapping: Word labels (flat or tuple) to Excel columns
label_to_column = {
    # First page labels
    "Case ID:": "CaseID",
    "Case Owner:": "CaseOwner",
    "Customer (Complainant) Name:": "CustomerName",
    "Customer Number (ECN):": "ECN",
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bulleted List:": "ResponseBulletList",

    # Placeholder replacements
    "<<RelatedCasesRecontact>>": "RelatedCasesRecontact",
    "<<CrossLineBusinessCase>>": "CrossLineBusinessCase",
    "<<CallReviews>>": "CallReviews",
    "<<RiskIndicators>>": "RiskIndicators",
    "<<WF_TPError>>": "WF_TPError",
    "<<ReliefType>>": "ReliefType",
    "<<Relief_Reason>>": "Relief_Reason",
    "<<Resolution>>": "Resolution",

    # Final resolution note box
    "Note Resolution:": "Resolution_Note",

    # Section 2: Primary Complaint
    ("Primary Complaint", "Enter Customer Problem and Description"): "Primary_Description",
    ("Primary Complaint", "List details from the complaint"): "Primary_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "Primary_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "Primary_Summary",

    # Section 2: Secondary Complaint
    ("Secondary Complaint", "Enter Customer Problem and Description"): "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"): "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"): "Secondary_Summary",

    # Section 2: Additional Complaint
    ("Additional Complaint(s)", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint(s)", "List details from the complaint"): "Additional_Details",
    ("Additional Complaint(s)", "Cite documents, tools, systems"): "Additional_Citations",
    ("Additional Complaint(s)", "Summarize findings of the research"): "Additional_Summary",
}

# Read Excel with string CaseID
df = pd.read_excel(excel_path, dtype={"CaseID": str})

# Fill table cells and placeholders
def fill_table_right_cell(table, label_to_value):
    section = ""
    for row in table.rows:
        for i, cell in enumerate(row.cells):
            text = cell.text.strip()
            if text in ["Primary Complaint", "Secondary Complaint", "Additional Complaint(s)"]:
                section = text
            for label, col in label_to_value.items():
                if isinstance(label, tuple):
                    if section == label[0] and text.startswith(label[1]):
                        if i + 1 < len(row.cells):
                            row.cells[i + 1].text = str(label_to_value[label])
                        break
                elif text.startswith(label):
                    if i + 1 < len(row.cells):
                        row.cells[i + 1].text = str(label_to_value[label])
                    break

# Replace text in paragraphs
def replace_placeholders(doc, label_to_value):
    for p in doc.paragraphs:
        for label, col in label_to_value.items():
            if isinstance(label, str) and label.startswith("<<") and label in p.text:
                p.text = p.text.replace(label, str(label_to_value[label]))

# Loop through each row
for idx, row in df.iterrows():
    doc = Document(template_path)

    # Build value map for this row
    label_to_value = {}
    for label, col in label_to_column.items():
        value = str(row[col]).strip() if pd.notnull(row[col]) else ""
        label_to_value[label] = value

    # Fill tables and replace placeholders
    for table in doc.tables:
        fill_table_right_cell(table, label_to_value)
    replace_placeholders(doc, label_to_value)

    # Save output
    case_id = row["CaseID"].zfill(16)
    output_file = os.path.join(output_dir, f"Case_{case_id}.docx")
    doc.save(output_file)

print("All case documents generated successfully.")
