# Label-to-column mapping
label_to_column = {
    "Case ID:": "CaseID",
    "Case Owner:": "CaseOwner",
    "Customer (Complainant) Name:": "CustomerName",
    "Customer Number (ECN):": "ECN",
    "Original Note Summary:": "OriginalNote",
    "Updated Note Summary:": "UpdatedNote",
    "Response Bullet List:": "ResponseBulletList",
    "<<RelatedCasesRecontact>>": "RelatedCasesRecontact",
    "<<CrossLineBusinessCase>>": "CrossLineBusinessCase",
    "<<CallReviews>>": "CallReviews",
    "<<RiskIndicators>>": "RiskIndicators",
    "<<WF_TPError>>": "WF_TPError",
    "<<ReliefType>>": "ReliefType",
    "<<Relief_Reason>>": "Relief_Reason",
    "<<Resolution>>": "Resolution_Note",
    ("Primary Complaint", "Enter Customer Problem and Description"): "Primary_Description",
    ("Primary Complaint", "List details from the complaint"): "Primary_Details",
    ("Primary Complaint", "Cite documents, tools, systems"): "Primary_Citations",
    ("Primary Complaint", "Summarize findings of the research"): "Primary_Summary",
    ("Secondary Complaint", "Enter Customer Problem and Description"): "Secondary_Description",
    ("Secondary Complaint", "List details from the complaint"): "Secondary_Details",
    ("Secondary Complaint", "Cite documents, tools, systems"): "Secondary_Citations",
    ("Secondary Complaint", "Summarize findings of the research"): "Secondary_Summary",
    ("Additional Complaint(s)", "Enter Customer Problem and Description"): "Additional_Description",
    ("Additional Complaint(s)", "List details from the complaint"): "Additional_Details",
    ("Additional Complaint(s)", "Cite documents, tools, systems"): "Additional_Citations",
    ("Additional Complaint(s)", "Summarize findings of the research"): "Additional_Summary",
}

def fill_table_right_cell(table, label_to_value):
    section = table.rows[0].cells[0].text.strip()
    for row in table.rows:
        for i, cell in enumerate(row.cells):
            label = cell.text.strip()
            key = (section, label)
            alt_key = label  # Fallback for no-section labels
            if key in label_to_column:
                col = label_to_column[key]
            elif alt_key in label_to_column:
                col = label_to_column[alt_key]
            else:
                continue
            value = label_to_value.get(col, "")
            if i + 1 < len(row.cells):
                row.cells[i + 1].text = str(value)

def replace_placeholders(doc, label_to_value):
    def replace(text):
        for label, val in label_to_value.items():
            if isinstance(label, str) and label.startswith("<<") and label.endswith(">>"):
                text = text.replace(label, str(val))
        return text

    for para in doc.paragraphs:
        for run in para.runs:
            run.text = replace(run.text)
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for para in cell.paragraphs:
                    for run in para.runs:
                        run.text = replace(run.text)

# Main loop
for idx, row in df.iterrows():
    doc = Document(template_path)
    label_to_value = {
        label: str(row[col]).strip() if pd.notnull(row[col]) else ""
        for label, col in label_to_column.items()
    }

    for table in doc.tables:
        fill_table_right_cell(table, label_to_value)

    replace_placeholders(doc, label_to_value)

    case_id = str(row["CaseID"]).zfill(16)
    output_file = os.path.join(output_dir, f"Case_{case_id}.docx")
    doc.save(output_file)
    print(f"[SAVED] {output_file}")

print("All case documents created with full section and placeholder filling.")
